{"version":3,"file":"static/module-remix-run.36ac99c1.js","mappings":"mQAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAUA,SAASA,GAAW,CAClB,OAAAA,EAAW,OAAO,OAAS,OAAO,OAAO,KAAK,EAAI,SAAUC,EAAQ,CAClE,QAASC,EAAI,EAAGA,EAAI,UAAU,OAAQA,IAAK,CACzC,IAAIC,EAAS,UAAUD,CAAC,EACxB,QAASE,KAAOD,EACV,OAAO,UAAU,eAAe,KAAKA,EAAQC,CAAG,IAClDH,EAAOG,CAAG,EAAID,EAAOC,CAAG,EAG9B,CACA,OAAOH,CACT,EACOD,EAAS,MAAM,KAAM,SAAS,CACvC,CAQA,IAAIK,GACH,SAAUA,EAAQ,CAQjBA,EAAO,IAAS,MAMhBA,EAAO,KAAU,OAKjBA,EAAO,QAAa,SACtB,GAAGA,IAAWA,EAAS,CAAC,EAAE,EAC1B,MAAMC,GAAoB,WAK1B,SAASC,GAAoBC,EAAS,CAChCA,IAAY,SACdA,EAAU,CAAC,GAEb,GAAI,CACF,eAAAC,EAAiB,CAAC,GAAG,EACrB,aAAAC,EACA,SAAAC,EAAW,EACb,EAAIH,EACAI,EACJA,EAAUH,EAAe,IAAI,CAACI,EAAOC,IAAUC,EAAqBF,EAAO,OAAOA,GAAU,SAAW,KAAOA,EAAM,MAAOC,IAAU,EAAI,UAAY,MAAS,CAAC,EAC/J,IAAIA,EAAQE,EAAWN,GAAgB,KAAOE,EAAQ,OAAS,EAAIF,CAAY,EAC3EO,EAASZ,EAAO,IAChBa,EAAW,KACf,SAASF,EAAWG,EAAG,CACrB,OAAO,KAAK,IAAI,KAAK,IAAIA,EAAG,CAAC,EAAGP,EAAQ,OAAS,CAAC,CACpD,CACA,SAASQ,GAAqB,CAC5B,OAAOR,EAAQE,CAAK,CACtB,CACA,SAASC,EAAqBM,EAAIC,EAAOlB,EAAK,CACxCkB,IAAU,SACZA,EAAQ,MAEV,IAAIC,EAAWC,GAAeZ,EAAUQ,EAAmB,EAAE,SAAW,IAAKC,EAAIC,EAAOlB,CAAG,EAC3F,OAAAqB,GAAQF,EAAS,SAAS,OAAO,CAAC,IAAM,IAAK,2DAA6D,KAAK,UAAUF,CAAE,CAAC,EACrHE,CACT,CACA,SAASG,EAAWL,EAAI,CACtB,OAAO,OAAOA,GAAO,SAAWA,EAAKM,GAAWN,CAAE,CACpD,CAoEA,MAnEc,CACZ,IAAI,OAAQ,CACV,OAAOP,CACT,EACA,IAAI,QAAS,CACX,OAAOG,CACT,EACA,IAAI,UAAW,CACb,OAAOG,EAAmB,CAC5B,EACA,WAAAM,EACA,UAAUL,EAAI,CACZ,OAAO,IAAI,IAAIK,EAAWL,CAAE,EAAG,kBAAkB,CACnD,EACA,eAAeA,EAAI,CACjB,IAAIO,EAAO,OAAOP,GAAO,SAAWQ,GAAUR,CAAE,EAAIA,EACpD,MAAO,CACL,SAAUO,EAAK,UAAY,GAC3B,OAAQA,EAAK,QAAU,GACvB,KAAMA,EAAK,MAAQ,EACrB,CACF,EACA,KAAKP,EAAIC,EAAO,CACdL,EAASZ,EAAO,KAChB,IAAIyB,EAAef,EAAqBM,EAAIC,CAAK,EACjDR,GAAS,EACTF,EAAQ,OAAOE,EAAOF,EAAQ,OAAQkB,CAAY,EAC9CnB,GAAYO,GACdA,EAAS,CACP,OAAAD,EACA,SAAUa,EACV,MAAO,CACT,CAAC,CAEL,EACA,QAAQT,EAAIC,EAAO,CACjBL,EAASZ,EAAO,QAChB,IAAIyB,EAAef,EAAqBM,EAAIC,CAAK,EACjDV,EAAQE,CAAK,EAAIgB,EACbnB,GAAYO,GACdA,EAAS,CACP,OAAAD,EACA,SAAUa,EACV,MAAO,CACT,CAAC,CAEL,EACA,GAAGC,EAAO,CACRd,EAASZ,EAAO,IAChB,IAAI2B,EAAYhB,EAAWF,EAAQiB,CAAK,EACpCD,EAAelB,EAAQoB,CAAS,EACpClB,EAAQkB,EACJd,GACFA,EAAS,CACP,OAAAD,EACA,SAAUa,EACV,MAAAC,CACF,CAAC,CAEL,EACA,OAAOE,EAAI,CACT,OAAAf,EAAWe,EACJ,IAAM,CACXf,EAAW,IACb,CACF,CACF,CAEF,CAQA,SAASgB,GAAqB1B,EAAS,CACjCA,IAAY,SACdA,EAAU,CAAC,GAEb,SAAS2B,EAAsBC,EAAQC,EAAe,CACpD,GAAI,CACF,SAAAC,EACA,OAAAC,EACA,KAAAC,CACF,EAAIJ,EAAO,SACX,OAAOZ,GAAe,GAAI,CACxB,SAAAc,EACA,OAAAC,EACA,KAAAC,CACF,EAEAH,EAAc,OAASA,EAAc,MAAM,KAAO,KAAMA,EAAc,OAASA,EAAc,MAAM,KAAO,SAAS,CACrH,CACA,SAASI,EAAkBL,EAAQf,EAAI,CACrC,OAAO,OAAOA,GAAO,SAAWA,EAAKM,GAAWN,CAAE,CACpD,CACA,OAAOqB,GAAmBP,EAAuBM,EAAmB,KAAMjC,CAAO,CACnF,CASA,SAASmC,GAAkBnC,EAAS,CAC9BA,IAAY,SACdA,EAAU,CAAC,GAEb,SAASoC,EAAmBR,EAAQC,EAAe,CACjD,GAAI,CACF,SAAAC,EAAW,IACX,OAAAC,EAAS,GACT,KAAAC,EAAO,EACT,EAAIX,GAAUO,EAAO,SAAS,KAAK,OAAO,CAAC,CAAC,EAO5C,MAAI,CAACE,EAAS,WAAW,GAAG,GAAK,CAACA,EAAS,WAAW,GAAG,IACvDA,EAAW,IAAMA,GAEZd,GAAe,GAAI,CACxB,SAAAc,EACA,OAAAC,EACA,KAAAC,CACF,EAEAH,EAAc,OAASA,EAAc,MAAM,KAAO,KAAMA,EAAc,OAASA,EAAc,MAAM,KAAO,SAAS,CACrH,CACA,SAASQ,EAAeT,EAAQf,EAAI,CAClC,IAAIyB,EAAOV,EAAO,SAAS,cAAc,MAAM,EAC3CW,EAAO,GACX,GAAID,GAAQA,EAAK,aAAa,MAAM,EAAG,CACrC,IAAIE,EAAMZ,EAAO,SAAS,KACtBa,EAAYD,EAAI,QAAQ,GAAG,EAC/BD,EAAOE,IAAc,GAAKD,EAAMA,EAAI,MAAM,EAAGC,CAAS,CACxD,CACA,OAAOF,EAAO,KAAO,OAAO1B,GAAO,SAAWA,EAAKM,GAAWN,CAAE,EAClE,CACA,SAAS6B,EAAqB3B,EAAUF,EAAI,CAC1CI,GAAQF,EAAS,SAAS,OAAO,CAAC,IAAM,IAAK,6DAA+D,KAAK,UAAUF,CAAE,EAAI,GAAG,CACtI,CACA,OAAOqB,GAAmBE,EAAoBC,EAAgBK,EAAsB1C,CAAO,CAC7F,CACA,SAAS2C,EAAUC,EAAOC,EAAS,CACjC,GAAID,IAAU,IAASA,IAAU,MAAQ,OAAOA,GAAU,YACxD,MAAM,IAAI,MAAMC,CAAO,CAE3B,CACA,SAAS5B,GAAQ6B,EAAMD,EAAS,CAC9B,GAAI,CAACC,EAAM,CAEL,OAAO,SAAY,aAAa,QAAQ,KAAKD,CAAO,EACxD,GAAI,CAMF,MAAM,IAAI,MAAMA,CAAO,CAEzB,MAAY,CAAC,CACf,CACF,CACA,SAASE,IAAY,CACnB,OAAO,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,EAAG,CAAC,CAC/C,CAIA,SAASC,GAAgBjC,EAAUT,EAAO,CACxC,MAAO,CACL,IAAKS,EAAS,MACd,IAAKA,EAAS,IACd,IAAKT,CACP,CACF,CAIA,SAASU,GAAeiC,EAASpC,EAAIC,EAAOlB,EAAK,CAC/C,OAAIkB,IAAU,SACZA,EAAQ,MAEKtB,EAAS,CACtB,SAAU,OAAOyD,GAAY,SAAWA,EAAUA,EAAQ,SAC1D,OAAQ,GACR,KAAM,EACR,EAAG,OAAOpC,GAAO,SAAWQ,GAAUR,CAAE,EAAIA,EAAI,CAC9C,MAAAC,EAKA,IAAKD,GAAMA,EAAG,KAAOjB,GAAOmD,GAAU,CACxC,CAAC,CAEH,CAIA,SAAS5B,GAAW+B,EAAM,CACxB,GAAI,CACF,SAAApB,EAAW,IACX,OAAAC,EAAS,GACT,KAAAC,EAAO,EACT,EAAIkB,EACJ,OAAInB,GAAUA,IAAW,MAAKD,GAAYC,EAAO,OAAO,CAAC,IAAM,IAAMA,EAAS,IAAMA,GAChFC,GAAQA,IAAS,MAAKF,GAAYE,EAAK,OAAO,CAAC,IAAM,IAAMA,EAAO,IAAMA,GACrEF,CACT,CAIA,SAAST,GAAUD,EAAM,CACvB,IAAI+B,EAAa,CAAC,EAClB,GAAI/B,EAAM,CACR,IAAIqB,EAAYrB,EAAK,QAAQ,GAAG,EAC5BqB,GAAa,IACfU,EAAW,KAAO/B,EAAK,OAAOqB,CAAS,EACvCrB,EAAOA,EAAK,OAAO,EAAGqB,CAAS,GAEjC,IAAIW,EAAchC,EAAK,QAAQ,GAAG,EAC9BgC,GAAe,IACjBD,EAAW,OAAS/B,EAAK,OAAOgC,CAAW,EAC3ChC,EAAOA,EAAK,OAAO,EAAGgC,CAAW,GAE/BhC,IACF+B,EAAW,SAAW/B,EAE1B,CACA,OAAO+B,CACT,CACA,SAASjB,GAAmBmB,EAAanC,EAAYoC,EAAkBtD,EAAS,CAC1EA,IAAY,SACdA,EAAU,CAAC,GAEb,GAAI,CACF,OAAA4B,EAAS,SAAS,YAClB,SAAAzB,EAAW,EACb,EAAIH,EACA6B,EAAgBD,EAAO,QACvBnB,EAASZ,EAAO,IAChBa,EAAW,KACXJ,EAAQiD,EAAS,EAIjBjD,GAAS,OACXA,EAAQ,EACRuB,EAAc,aAAarC,EAAS,CAAC,EAAGqC,EAAc,MAAO,CAC3D,IAAKvB,CACP,CAAC,EAAG,EAAE,GAER,SAASiD,GAAW,CAIlB,OAHY1B,EAAc,OAAS,CACjC,IAAK,IACP,GACa,GACf,CACA,SAAS2B,GAAY,CACnB/C,EAASZ,EAAO,IAChB,IAAI2B,EAAY+B,EAAS,EACrBhC,EAAQC,GAAa,KAAO,KAAOA,EAAYlB,EACnDA,EAAQkB,EACJd,GACFA,EAAS,CACP,OAAAD,EACA,SAAUgD,EAAQ,SAClB,MAAAlC,CACF,CAAC,CAEL,CACA,SAASmC,EAAK7C,EAAIC,EAAO,CACvBL,EAASZ,EAAO,KAChB,IAAIkB,EAAWC,GAAeyC,EAAQ,SAAU5C,EAAIC,CAAK,EACrDwC,GAAkBA,EAAiBvC,EAAUF,CAAE,EACnDP,EAAQiD,EAAS,EAAI,EACrB,IAAII,EAAeX,GAAgBjC,EAAUT,CAAK,EAC9CkC,EAAMiB,EAAQ,WAAW1C,CAAQ,EAErC,GAAI,CACFc,EAAc,UAAU8B,EAAc,GAAInB,CAAG,CAC/C,OAASoB,EAAO,CAKd,GAAIA,aAAiB,cAAgBA,EAAM,OAAS,iBAClD,MAAMA,EAIRhC,EAAO,SAAS,OAAOY,CAAG,CAC5B,CACIrC,GAAYO,GACdA,EAAS,CACP,OAAAD,EACA,SAAUgD,EAAQ,SAClB,MAAO,CACT,CAAC,CAEL,CACA,SAASI,EAAQhD,EAAIC,EAAO,CAC1BL,EAASZ,EAAO,QAChB,IAAIkB,EAAWC,GAAeyC,EAAQ,SAAU5C,EAAIC,CAAK,EACrDwC,GAAkBA,EAAiBvC,EAAUF,CAAE,EACnDP,EAAQiD,EAAS,EACjB,IAAII,EAAeX,GAAgBjC,EAAUT,CAAK,EAC9CkC,EAAMiB,EAAQ,WAAW1C,CAAQ,EACrCc,EAAc,aAAa8B,EAAc,GAAInB,CAAG,EAC5CrC,GAAYO,GACdA,EAAS,CACP,OAAAD,EACA,SAAUgD,EAAQ,SAClB,MAAO,CACT,CAAC,CAEL,CACA,SAASK,EAAUjD,EAAI,CAIrB,IAAIyB,EAAOV,EAAO,SAAS,SAAW,OAASA,EAAO,SAAS,OAASA,EAAO,SAAS,KACpFW,EAAO,OAAO1B,GAAO,SAAWA,EAAKM,GAAWN,CAAE,EAItD,OAAA0B,EAAOA,EAAK,QAAQ,KAAM,KAAK,EAC/BI,EAAUL,EAAM,sEAAwEC,CAAI,EACrF,IAAI,IAAIA,EAAMD,CAAI,CAC3B,CACA,IAAImB,EAAU,CACZ,IAAI,QAAS,CACX,OAAOhD,CACT,EACA,IAAI,UAAW,CACb,OAAO4C,EAAYzB,EAAQC,CAAa,CAC1C,EACA,OAAOJ,EAAI,CACT,GAAIf,EACF,MAAM,IAAI,MAAM,4CAA4C,EAE9D,OAAAkB,EAAO,iBAAiB9B,GAAmB0D,CAAS,EACpD9C,EAAWe,EACJ,IAAM,CACXG,EAAO,oBAAoB9B,GAAmB0D,CAAS,EACvD9C,EAAW,IACb,CACF,EACA,WAAWG,EAAI,CACb,OAAOK,EAAWU,EAAQf,CAAE,CAC9B,EACA,UAAAiD,EACA,eAAejD,EAAI,CAEjB,IAAI2B,EAAMsB,EAAUjD,CAAE,EACtB,MAAO,CACL,SAAU2B,EAAI,SACd,OAAQA,EAAI,OACZ,KAAMA,EAAI,IACZ,CACF,EACA,KAAAkB,EACA,QAAAG,EACA,GAAGlD,EAAG,CACJ,OAAOkB,EAAc,GAAGlB,CAAC,CAC3B,CACF,EACA,OAAO8C,CACT,CAGA,IAAIM,GACH,SAAUA,EAAY,CACrBA,EAAW,KAAU,OACrBA,EAAW,SAAc,WACzBA,EAAW,SAAc,WACzBA,EAAW,MAAW,OACxB,GAAGA,IAAeA,EAAa,CAAC,EAAE,EAClC,MAAMC,GAAqB,IAAI,IAAI,CAAC,OAAQ,gBAAiB,OAAQ,KAAM,QAAS,UAAU,CAAC,EAC/F,SAASC,GAAaC,EAAO,CAC3B,OAAOA,EAAM,QAAU,EACzB,CAGA,SAASC,GAA0BC,EAAQC,EAAoBC,EAAYC,EAAU,CACnF,OAAID,IAAe,SACjBA,EAAa,CAAC,GAEZC,IAAa,SACfA,EAAW,CAAC,GAEPH,EAAO,IAAI,CAACF,EAAO5D,IAAU,CAClC,IAAIkE,EAAW,CAAC,GAAGF,EAAY,OAAOhE,CAAK,CAAC,EACxCmE,EAAK,OAAOP,EAAM,IAAO,SAAWA,EAAM,GAAKM,EAAS,KAAK,GAAG,EAGpE,GAFA7B,EAAUuB,EAAM,QAAU,IAAQ,CAACA,EAAM,SAAU,2CAA2C,EAC9FvB,EAAU,CAAC4B,EAASE,CAAE,EAAG,qCAAwCA,EAAK,kEAAwE,EAC1IR,GAAaC,CAAK,EAAG,CACvB,IAAIQ,EAAalF,EAAS,CAAC,EAAG0E,EAAOG,EAAmBH,CAAK,EAAG,CAC9D,GAAAO,CACF,CAAC,EACD,OAAAF,EAASE,CAAE,EAAIC,EACRA,CACT,KAAO,CACL,IAAIC,EAAoBnF,EAAS,CAAC,EAAG0E,EAAOG,EAAmBH,CAAK,EAAG,CACrE,GAAAO,EACA,SAAU,MACZ,CAAC,EACD,OAAAF,EAASE,CAAE,EAAIE,EACXT,EAAM,WACRS,EAAkB,SAAWR,GAA0BD,EAAM,SAAUG,EAAoBG,EAAUD,CAAQ,GAExGI,CACT,CACF,CAAC,CACH,CAMA,SAASC,GAAYR,EAAQS,EAAaC,EAAU,CAClD,OAAIA,IAAa,SACfA,EAAW,KAENC,GAAgBX,EAAQS,EAAaC,EAAU,EAAK,CAC7D,CACA,SAASC,GAAgBX,EAAQS,EAAaC,EAAUE,EAAc,CACpE,IAAIjE,EAAW,OAAO8D,GAAgB,SAAWxD,GAAUwD,CAAW,EAAIA,EACtE/C,EAAWmD,GAAclE,EAAS,UAAY,IAAK+D,CAAQ,EAC/D,GAAIhD,GAAY,KACd,OAAO,KAET,IAAIoD,EAAWC,GAAcf,CAAM,EACnCgB,GAAkBF,CAAQ,EAC1B,IAAIG,EAAU,KACd,QAAS3F,EAAI,EAAG2F,GAAW,MAAQ3F,EAAIwF,EAAS,OAAQ,EAAExF,EAAG,CAO3D,IAAI4F,EAAUC,GAAWzD,CAAQ,EACjCuD,EAAUG,GAAiBN,EAASxF,CAAC,EAAG4F,EAASN,CAAY,CAC/D,CACA,OAAOK,CACT,CACA,SAASI,GAA2BC,EAAOC,EAAY,CACrD,GAAI,CACF,MAAAzB,EACA,SAAApC,EACA,OAAA8D,CACF,EAAIF,EACJ,MAAO,CACL,GAAIxB,EAAM,GACV,SAAApC,EACA,OAAA8D,EACA,KAAMD,EAAWzB,EAAM,EAAE,EACzB,OAAQA,EAAM,MAChB,CACF,CACA,SAASiB,GAAcf,EAAQc,EAAUW,EAAavB,EAAY,CAC5DY,IAAa,SACfA,EAAW,CAAC,GAEVW,IAAgB,SAClBA,EAAc,CAAC,GAEbvB,IAAe,SACjBA,EAAa,IAEf,IAAIwB,EAAe,CAAC5B,EAAO5D,EAAOyF,IAAiB,CACjD,IAAIC,EAAO,CACT,aAAcD,IAAiB,OAAY7B,EAAM,MAAQ,GAAK6B,EAC9D,cAAe7B,EAAM,gBAAkB,GACvC,cAAe5D,EACf,MAAA4D,CACF,EACI8B,EAAK,aAAa,WAAW,GAAG,IAClCrD,EAAUqD,EAAK,aAAa,WAAW1B,CAAU,EAAG,wBAA2B0B,EAAK,aAAe,wBAA2B,IAAO1B,EAAa,iDAAoD,6DAA6D,EACnQ0B,EAAK,aAAeA,EAAK,aAAa,MAAM1B,EAAW,MAAM,GAE/D,IAAIlD,EAAO6E,GAAU,CAAC3B,EAAY0B,EAAK,YAAY,CAAC,EAChDE,EAAaL,EAAY,OAAOG,CAAI,EAIpC9B,EAAM,UAAYA,EAAM,SAAS,OAAS,IAC5CvB,EAGAuB,EAAM,QAAU,GAAM,2DAA6D,qCAAwC9C,EAAO,KAAM,EACxI+D,GAAcjB,EAAM,SAAUgB,EAAUgB,EAAY9E,CAAI,GAItD,EAAA8C,EAAM,MAAQ,MAAQ,CAACA,EAAM,QAGjCgB,EAAS,KAAK,CACZ,KAAA9D,EACA,MAAO+E,GAAa/E,EAAM8C,EAAM,KAAK,EACrC,WAAAgC,CACF,CAAC,CACH,EACA,OAAA9B,EAAO,QAAQ,CAACF,EAAO5D,IAAU,CAC/B,IAAI8F,EAEJ,GAAIlC,EAAM,OAAS,IAAM,GAAGkC,EAAclC,EAAM,OAAS,MAAQkC,EAAY,SAAS,GAAG,GACvFN,EAAa5B,EAAO5D,CAAK,MAEzB,SAAS+F,KAAYC,GAAwBpC,EAAM,IAAI,EACrD4B,EAAa5B,EAAO5D,EAAO+F,CAAQ,CAGzC,CAAC,EACMnB,CACT,CAeA,SAASoB,GAAwBlF,EAAM,CACrC,IAAImF,EAAWnF,EAAK,MAAM,GAAG,EAC7B,GAAImF,EAAS,SAAW,EAAG,MAAO,CAAC,EACnC,GAAI,CAACC,EAAO,GAAGC,CAAI,EAAIF,EAEnBG,EAAaF,EAAM,SAAS,GAAG,EAE/BG,EAAWH,EAAM,QAAQ,MAAO,EAAE,EACtC,GAAIC,EAAK,SAAW,EAGlB,OAAOC,EAAa,CAACC,EAAU,EAAE,EAAI,CAACA,CAAQ,EAEhD,IAAIC,EAAeN,GAAwBG,EAAK,KAAK,GAAG,CAAC,EACrDI,EAAS,CAAC,EAQd,OAAAA,EAAO,KAAK,GAAGD,EAAa,IAAIE,GAAWA,IAAY,GAAKH,EAAW,CAACA,EAAUG,CAAO,EAAE,KAAK,GAAG,CAAC,CAAC,EAEjGJ,GACFG,EAAO,KAAK,GAAGD,CAAY,EAGtBC,EAAO,IAAIR,GAAYjF,EAAK,WAAW,GAAG,GAAKiF,IAAa,GAAK,IAAMA,CAAQ,CACxF,CACA,SAASjB,GAAkBF,EAAU,CACnCA,EAAS,KAAK,CAAC6B,EAAGC,IAAMD,EAAE,QAAUC,EAAE,MAAQA,EAAE,MAAQD,EAAE,MACxDE,GAAeF,EAAE,WAAW,IAAIf,GAAQA,EAAK,aAAa,EAAGgB,EAAE,WAAW,IAAIhB,GAAQA,EAAK,aAAa,CAAC,CAAC,CAC9G,CACA,MAAMkB,GAAU,YACVC,GAAsB,EACtBC,GAAkB,EAClBC,GAAoB,EACpBC,GAAqB,GACrBC,GAAe,GACfC,GAAUC,GAAKA,IAAM,IAC3B,SAAStB,GAAa/E,EAAMd,EAAO,CACjC,IAAIiG,EAAWnF,EAAK,MAAM,GAAG,EACzBsG,EAAenB,EAAS,OAC5B,OAAIA,EAAS,KAAKiB,EAAO,IACvBE,GAAgBH,IAEdjH,IACFoH,GAAgBN,IAEXb,EAAS,OAAOkB,GAAK,CAACD,GAAQC,CAAC,CAAC,EAAE,OAAO,CAACE,EAAOC,IAAYD,GAAST,GAAQ,KAAKU,CAAO,EAAIT,GAAsBS,IAAY,GAAKP,GAAoBC,IAAqBI,CAAY,CACnM,CACA,SAAST,GAAeF,EAAGC,EAAG,CAE5B,OADeD,EAAE,SAAWC,EAAE,QAAUD,EAAE,MAAM,EAAG,EAAE,EAAE,MAAM,CAAC,EAAGrH,IAAM,IAAMsH,EAAEtH,CAAC,CAAC,EAMjFqH,EAAEA,EAAE,OAAS,CAAC,EAAIC,EAAEA,EAAE,OAAS,CAAC,EAGhC,CACF,CACA,SAASxB,GAAiBqC,EAAQ/F,EAAUkD,EAAc,CACpDA,IAAiB,SACnBA,EAAe,IAEjB,GAAI,CACF,WAAAkB,CACF,EAAI2B,EACAC,EAAgB,CAAC,EACjBC,EAAkB,IAClB1C,EAAU,CAAC,EACf,QAAS3F,EAAI,EAAGA,EAAIwG,EAAW,OAAQ,EAAExG,EAAG,CAC1C,IAAIsG,EAAOE,EAAWxG,CAAC,EACnBsI,EAAMtI,IAAMwG,EAAW,OAAS,EAChC+B,EAAoBF,IAAoB,IAAMjG,EAAWA,EAAS,MAAMiG,EAAgB,MAAM,GAAK,IACnGrC,EAAQwC,GAAU,CACpB,KAAMlC,EAAK,aACX,cAAeA,EAAK,cACpB,IAAAgC,CACF,EAAGC,CAAiB,EAChB/D,EAAQ8B,EAAK,MAQjB,GAPI,CAACN,GAASsC,GAAOhD,GAAgB,CAACkB,EAAWA,EAAW,OAAS,CAAC,EAAE,MAAM,QAC5ER,EAAQwC,GAAU,CAChB,KAAMlC,EAAK,aACX,cAAeA,EAAK,cACpB,IAAK,EACP,EAAGiC,CAAiB,GAElB,CAACvC,EACH,OAAO,KAET,OAAO,OAAOoC,EAAepC,EAAM,MAAM,EACzCL,EAAQ,KAAK,CAEX,OAAQyC,EACR,SAAU7B,GAAU,CAAC8B,EAAiBrC,EAAM,QAAQ,CAAC,EACrD,aAAcyC,GAAkBlC,GAAU,CAAC8B,EAAiBrC,EAAM,YAAY,CAAC,CAAC,EAChF,MAAAxB,CACF,CAAC,EACGwB,EAAM,eAAiB,MACzBqC,EAAkB9B,GAAU,CAAC8B,EAAiBrC,EAAM,YAAY,CAAC,EAErE,CACA,OAAOL,CACT,CAMA,SAAS+C,GAAaC,EAAczC,EAAQ,CACtCA,IAAW,SACbA,EAAS,CAAC,GAEZ,IAAIxE,EAAOiH,EACPjH,EAAK,SAAS,GAAG,GAAKA,IAAS,KAAO,CAACA,EAAK,SAAS,IAAI,IAC3DH,GAAQ,GAAO,eAAkBG,EAAO,oCAAuC,IAAOA,EAAK,QAAQ,MAAO,IAAI,EAAI,qCAAwC,oEAAsE,oCAAuCA,EAAK,QAAQ,MAAO,IAAI,EAAI,KAAM,EACzSA,EAAOA,EAAK,QAAQ,MAAO,IAAI,GAGjC,MAAMkH,EAASlH,EAAK,WAAW,GAAG,EAAI,IAAM,GACtCmH,EAAYC,GAAKA,GAAK,KAAO,GAAK,OAAOA,GAAM,SAAWA,EAAI,OAAOA,CAAC,EACtEjC,EAAWnF,EAAK,MAAM,KAAK,EAAE,IAAI,CAACwG,EAAStH,EAAOmI,IAAU,CAGhE,GAFsBnI,IAAUmI,EAAM,OAAS,GAE1Bb,IAAY,IAG/B,OAAOW,EAAU3C,EAFJ,GAEe,CAAC,EAE/B,MAAM8C,EAAWd,EAAQ,MAAM,kBAAkB,EACjD,GAAIc,EAAU,CACZ,KAAM,CAAC,CAAE9I,EAAK+I,CAAQ,EAAID,EAC1B,IAAIE,EAAQhD,EAAOhG,CAAG,EACtB,OAAA+C,EAAUgG,IAAa,KAAOC,GAAS,KAAM,aAAgBhJ,EAAM,SAAU,EACtE2I,EAAUK,CAAK,CACxB,CAEA,OAAOhB,EAAQ,QAAQ,OAAQ,EAAE,CACnC,CAAC,EAEA,OAAOA,GAAW,CAAC,CAACA,CAAO,EAC5B,OAAOU,EAAS/B,EAAS,KAAK,GAAG,CACnC,CAOA,SAAS2B,GAAUW,EAAS/G,EAAU,CAChC,OAAO+G,GAAY,WACrBA,EAAU,CACR,KAAMA,EACN,cAAe,GACf,IAAK,EACP,GAEF,GAAI,CAACC,EAASC,CAAc,EAAIC,GAAYH,EAAQ,KAAMA,EAAQ,cAAeA,EAAQ,GAAG,EACxFnD,EAAQ5D,EAAS,MAAMgH,CAAO,EAClC,GAAI,CAACpD,EAAO,OAAO,KACnB,IAAIqC,EAAkBrC,EAAM,CAAC,EACzBuD,EAAelB,EAAgB,QAAQ,UAAW,IAAI,EACtDmB,EAAgBxD,EAAM,MAAM,CAAC,EAoBjC,MAAO,CACL,OApBWqD,EAAe,OAAO,CAACI,EAAMjG,EAAM5C,IAAU,CACxD,GAAI,CACF,UAAA8I,EACA,WAAA1C,CACF,EAAIxD,EAGJ,GAAIkG,IAAc,IAAK,CACrB,IAAIC,EAAaH,EAAc5I,CAAK,GAAK,GACzC2I,EAAelB,EAAgB,MAAM,EAAGA,EAAgB,OAASsB,EAAW,MAAM,EAAE,QAAQ,UAAW,IAAI,CAC7G,CACA,MAAMzG,EAAQsG,EAAc5I,CAAK,EACjC,OAAIoG,GAAc,CAAC9D,EACjBuG,EAAKC,CAAS,EAAI,OAElBD,EAAKC,CAAS,GAAKxG,GAAS,IAAI,QAAQ,OAAQ,GAAG,EAE9CuG,CACT,EAAG,CAAC,CAAC,EAGH,SAAUpB,EACV,aAAAkB,EACA,QAAAJ,CACF,CACF,CACA,SAASG,GAAY5H,EAAMkI,EAAetB,EAAK,CACzCsB,IAAkB,SACpBA,EAAgB,IAEdtB,IAAQ,SACVA,EAAM,IAER/G,GAAQG,IAAS,KAAO,CAACA,EAAK,SAAS,GAAG,GAAKA,EAAK,SAAS,IAAI,EAAG,eAAkBA,EAAO,oCAAuC,IAAOA,EAAK,QAAQ,MAAO,IAAI,EAAI,qCAAwC,oEAAsE,oCAAuCA,EAAK,QAAQ,MAAO,IAAI,EAAI,KAAM,EAC9V,IAAIwE,EAAS,CAAC,EACV2D,EAAe,IAAMnI,EAAK,QAAQ,UAAW,EAAE,EAClD,QAAQ,OAAQ,GAAG,EACnB,QAAQ,qBAAsB,MAAM,EACpC,QAAQ,oBAAqB,CAACoI,EAAGJ,EAAW1C,KAC3Cd,EAAO,KAAK,CACV,UAAAwD,EACA,WAAY1C,GAAc,IAC5B,CAAC,EACMA,EAAa,eAAiB,aACtC,EACD,OAAItF,EAAK,SAAS,GAAG,GACnBwE,EAAO,KAAK,CACV,UAAW,GACb,CAAC,EACD2D,GAAgBnI,IAAS,KAAOA,IAAS,KAAO,QAC9C,qBACO4G,EAETuB,GAAgB,QACPnI,IAAS,IAAMA,IAAS,MAQjCmI,GAAgB,iBAGX,CADO,IAAI,OAAOA,EAAcD,EAAgB,OAAY,GAAG,EACrD1D,CAAM,CACzB,CACA,SAASL,GAAW3C,EAAO,CACzB,GAAI,CACF,OAAOA,EAAM,MAAM,GAAG,EAAE,IAAI6G,GAAK,mBAAmBA,CAAC,EAAE,QAAQ,MAAO,KAAK,CAAC,EAAE,KAAK,GAAG,CACxF,OAAS7F,EAAO,CACd,OAAA3C,GAAQ,GAAO,iBAAoB2B,EAAQ,2GAAmH,aAAegB,EAAQ,KAAK,EACnLhB,CACT,CACF,CAIA,SAASqC,GAAcnD,EAAUgD,EAAU,CACzC,GAAIA,IAAa,IAAK,OAAOhD,EAC7B,GAAI,CAACA,EAAS,YAAY,EAAE,WAAWgD,EAAS,YAAY,CAAC,EAC3D,OAAO,KAIT,IAAI4E,EAAa5E,EAAS,SAAS,GAAG,EAAIA,EAAS,OAAS,EAAIA,EAAS,OACrE6E,EAAW7H,EAAS,OAAO4H,CAAU,EACzC,OAAIC,GAAYA,IAAa,IAEpB,KAEF7H,EAAS,MAAM4H,CAAU,GAAK,GACvC,CAMA,SAASE,GAAY/I,EAAIgJ,EAAc,CACjCA,IAAiB,SACnBA,EAAe,KAEjB,GAAI,CACF,SAAUC,EACV,OAAA/H,EAAS,GACT,KAAAC,EAAO,EACT,EAAI,OAAOnB,GAAO,SAAWQ,GAAUR,CAAE,EAAIA,EAE7C,MAAO,CACL,SAFaiJ,EAAaA,EAAW,WAAW,GAAG,EAAIA,EAAaC,GAAgBD,EAAYD,CAAY,EAAIA,EAGhH,OAAQG,GAAgBjI,CAAM,EAC9B,KAAMkI,GAAcjI,CAAI,CAC1B,CACF,CACA,SAAS+H,GAAgBhE,EAAc8D,EAAc,CACnD,IAAItD,EAAWsD,EAAa,QAAQ,OAAQ,EAAE,EAAE,MAAM,GAAG,EAEzD,OADuB9D,EAAa,MAAM,GAAG,EAC5B,QAAQ6B,GAAW,CAC9BA,IAAY,KAEVrB,EAAS,OAAS,GAAGA,EAAS,IAAI,EAC7BqB,IAAY,KACrBrB,EAAS,KAAKqB,CAAO,CAEzB,CAAC,EACMrB,EAAS,OAAS,EAAIA,EAAS,KAAK,GAAG,EAAI,GACpD,CACA,SAAS2D,GAAoBC,EAAMC,EAAOC,EAAMjJ,EAAM,CACpD,MAAO,qBAAuB+I,EAAO,wCAA0C,OAASC,EAAQ,YAAc,KAAK,UAAUhJ,CAAI,EAAI,uCAAyC,OAASiJ,EAAO,4DAA8D,mEAC9P,CAwBA,SAASC,GAA2BjF,EAAS,CAC3C,OAAOA,EAAQ,OAAO,CAACK,EAAOpF,IAAUA,IAAU,GAAKoF,EAAM,MAAM,MAAQA,EAAM,MAAM,KAAK,OAAS,CAAC,CACxG,CAGA,SAAS6E,GAAoBlF,EAASmF,EAAsB,CAC1D,IAAIC,EAAcH,GAA2BjF,CAAO,EAIpD,OAAImF,EACKC,EAAY,IAAI,CAAC/E,EAAOgF,IAAQA,IAAQD,EAAY,OAAS,EAAI/E,EAAM,SAAWA,EAAM,YAAY,EAEtG+E,EAAY,IAAI/E,GAASA,EAAM,YAAY,CACpD,CAIA,SAASiF,GAAUC,EAAOC,EAAgBC,EAAkBC,EAAgB,CACtEA,IAAmB,SACrBA,EAAiB,IAEnB,IAAIlK,EACA,OAAO+J,GAAU,SACnB/J,EAAKQ,GAAUuJ,CAAK,GAEpB/J,EAAKrB,EAAS,CAAC,EAAGoL,CAAK,EACvBjI,EAAU,CAAC9B,EAAG,UAAY,CAACA,EAAG,SAAS,SAAS,GAAG,EAAGqJ,GAAoB,IAAK,WAAY,SAAUrJ,CAAE,CAAC,EACxG8B,EAAU,CAAC9B,EAAG,UAAY,CAACA,EAAG,SAAS,SAAS,GAAG,EAAGqJ,GAAoB,IAAK,WAAY,OAAQrJ,CAAE,CAAC,EACtG8B,EAAU,CAAC9B,EAAG,QAAU,CAACA,EAAG,OAAO,SAAS,GAAG,EAAGqJ,GAAoB,IAAK,SAAU,OAAQrJ,CAAE,CAAC,GAElG,IAAImK,EAAcJ,IAAU,IAAM/J,EAAG,WAAa,GAC9CiJ,EAAakB,EAAc,IAAMnK,EAAG,SACpCoK,EAUJ,GAAInB,GAAc,KAChBmB,EAAOH,MACF,CACL,IAAII,EAAqBL,EAAe,OAAS,EAKjD,GAAI,CAACE,GAAkBjB,EAAW,WAAW,IAAI,EAAG,CAClD,IAAIqB,EAAarB,EAAW,MAAM,GAAG,EACrC,KAAOqB,EAAW,CAAC,IAAM,MACvBA,EAAW,MAAM,EACjBD,GAAsB,EAExBrK,EAAG,SAAWsK,EAAW,KAAK,GAAG,CACnC,CACAF,EAAOC,GAAsB,EAAIL,EAAeK,CAAkB,EAAI,GACxE,CACA,IAAI9J,EAAOwI,GAAY/I,EAAIoK,CAAI,EAE3BG,EAA2BtB,GAAcA,IAAe,KAAOA,EAAW,SAAS,GAAG,EAEtFuB,GAA2BL,GAAelB,IAAe,MAAQgB,EAAiB,SAAS,GAAG,EAClG,MAAI,CAAC1J,EAAK,SAAS,SAAS,GAAG,IAAMgK,GAA4BC,KAC/DjK,EAAK,UAAY,KAEZA,CACT,CAIA,SAASkK,GAAczK,EAAI,CAEzB,OAAOA,IAAO,IAAMA,EAAG,WAAa,GAAK,IAAM,OAAOA,GAAO,SAAWQ,GAAUR,CAAE,EAAE,SAAWA,EAAG,QACtG,CAIA,MAAMoF,GAAYsF,GAASA,EAAM,KAAK,GAAG,EAAE,QAAQ,SAAU,GAAG,EAI1DpD,GAAoBrG,GAAYA,EAAS,QAAQ,OAAQ,EAAE,EAAE,QAAQ,OAAQ,GAAG,EAIhFkI,GAAkBjI,GAAU,CAACA,GAAUA,IAAW,IAAM,GAAKA,EAAO,WAAW,GAAG,EAAIA,EAAS,IAAMA,EAIrGkI,GAAgBjI,GAAQ,CAACA,GAAQA,IAAS,IAAM,GAAKA,EAAK,WAAW,GAAG,EAAIA,EAAO,IAAMA,EAKzFwJ,GAAO,SAAcC,EAAMC,EAAM,CACjCA,IAAS,SACXA,EAAO,CAAC,GAEV,IAAIC,EAAe,OAAOD,GAAS,SAAW,CAC5C,OAAQA,CACV,EAAIA,EACAE,EAAU,IAAI,QAAQD,EAAa,OAAO,EAC9C,OAAKC,EAAQ,IAAI,cAAc,GAC7BA,EAAQ,IAAI,eAAgB,iCAAiC,EAExD,IAAI,SAAS,KAAK,UAAUH,CAAI,EAAGjM,EAAS,CAAC,EAAGmM,EAAc,CACnE,QAAAC,CACF,CAAC,CAAC,CACJ,EACA,MAAMC,WAA6B,KAAM,CAAC,CAC1C,MAAMC,EAAa,CACjB,YAAYL,EAAME,EAAc,CAC9B,KAAK,eAAiB,IAAI,IAC1B,KAAK,YAAc,IAAI,IACvB,KAAK,aAAe,CAAC,EACrBhJ,EAAU8I,GAAQ,OAAOA,GAAS,UAAY,CAAC,MAAM,QAAQA,CAAI,EAAG,oCAAoC,EAGxG,IAAIM,EACJ,KAAK,aAAe,IAAI,QAAQ,CAACvC,EAAGwC,IAAMD,EAASC,CAAC,EACpD,KAAK,WAAa,IAAI,gBACtB,IAAIC,EAAU,IAAMF,EAAO,IAAIF,GAAqB,uBAAuB,CAAC,EAC5E,KAAK,oBAAsB,IAAM,KAAK,WAAW,OAAO,oBAAoB,QAASI,CAAO,EAC5F,KAAK,WAAW,OAAO,iBAAiB,QAASA,CAAO,EACxD,KAAK,KAAO,OAAO,QAAQR,CAAI,EAAE,OAAO,CAACS,EAAKC,IAAU,CACtD,GAAI,CAACvM,EAAKgD,CAAK,EAAIuJ,EACnB,OAAO,OAAO,OAAOD,EAAK,CACxB,CAACtM,CAAG,EAAG,KAAK,aAAaA,EAAKgD,CAAK,CACrC,CAAC,CACH,EAAG,CAAC,CAAC,EACD,KAAK,MAEP,KAAK,oBAAoB,EAE3B,KAAK,KAAO+I,CACd,CACA,aAAa/L,EAAKgD,EAAO,CACvB,GAAI,EAAEA,aAAiB,SACrB,OAAOA,EAET,KAAK,aAAa,KAAKhD,CAAG,EAC1B,KAAK,eAAe,IAAIA,CAAG,EAG3B,IAAIwM,EAAU,QAAQ,KAAK,CAACxJ,EAAO,KAAK,YAAY,CAAC,EAAE,KAAK6I,GAAQ,KAAK,SAASW,EAASxM,EAAK,OAAW6L,CAAI,EAAG7H,GAAS,KAAK,SAASwI,EAASxM,EAAKgE,CAAK,CAAC,EAG7J,OAAAwI,EAAQ,MAAM,IAAM,CAAC,CAAC,EACtB,OAAO,eAAeA,EAAS,WAAY,CACzC,IAAK,IAAM,EACb,CAAC,EACMA,CACT,CACA,SAASA,EAASxM,EAAKgE,EAAO6H,EAAM,CAClC,GAAI,KAAK,WAAW,OAAO,SAAW7H,aAAiBiI,GACrD,YAAK,oBAAoB,EACzB,OAAO,eAAeO,EAAS,SAAU,CACvC,IAAK,IAAMxI,CACb,CAAC,EACM,QAAQ,OAAOA,CAAK,EAS7B,GAPA,KAAK,eAAe,OAAOhE,CAAG,EAC1B,KAAK,MAEP,KAAK,oBAAoB,EAIvBgE,IAAU,QAAa6H,IAAS,OAAW,CAC7C,IAAIY,EAAiB,IAAI,MAAM,0BAA6BzM,EAAM,uFAA6F,EAC/J,cAAO,eAAewM,EAAS,SAAU,CACvC,IAAK,IAAMC,CACb,CAAC,EACD,KAAK,KAAK,GAAOzM,CAAG,EACb,QAAQ,OAAOyM,CAAc,CACtC,CACA,OAAIZ,IAAS,QACX,OAAO,eAAeW,EAAS,SAAU,CACvC,IAAK,IAAMxI,CACb,CAAC,EACD,KAAK,KAAK,GAAOhE,CAAG,EACb,QAAQ,OAAOgE,CAAK,IAE7B,OAAO,eAAewI,EAAS,QAAS,CACtC,IAAK,IAAMX,CACb,CAAC,EACD,KAAK,KAAK,GAAO7L,CAAG,EACb6L,EACT,CACA,KAAKa,EAASC,EAAY,CACxB,KAAK,YAAY,QAAQC,GAAcA,EAAWF,EAASC,CAAU,CAAC,CACxE,CACA,UAAU9K,EAAI,CACZ,YAAK,YAAY,IAAIA,CAAE,EAChB,IAAM,KAAK,YAAY,OAAOA,CAAE,CACzC,CACA,QAAS,CACP,KAAK,WAAW,MAAM,EACtB,KAAK,eAAe,QAAQ,CAACgI,EAAGgD,IAAM,KAAK,eAAe,OAAOA,CAAC,CAAC,EACnE,KAAK,KAAK,EAAI,CAChB,CACA,MAAM,YAAYC,EAAQ,CACxB,IAAIJ,EAAU,GACd,GAAI,CAAC,KAAK,KAAM,CACd,IAAIL,EAAU,IAAM,KAAK,OAAO,EAChCS,EAAO,iBAAiB,QAAST,CAAO,EACxCK,EAAU,MAAM,IAAI,QAAQK,GAAW,CACrC,KAAK,UAAUL,GAAW,CACxBI,EAAO,oBAAoB,QAAST,CAAO,GACvCK,GAAW,KAAK,OAClBK,EAAQL,CAAO,CAEnB,CAAC,CACH,CAAC,CACH,CACA,OAAOA,CACT,CACA,IAAI,MAAO,CACT,OAAO,KAAK,eAAe,OAAS,CACtC,CACA,IAAI,eAAgB,CAClB,OAAA3J,EAAU,KAAK,OAAS,MAAQ,KAAK,KAAM,2DAA2D,EAC/F,OAAO,QAAQ,KAAK,IAAI,EAAE,OAAO,CAACuJ,EAAKU,IAAU,CACtD,GAAI,CAAChN,EAAKgD,CAAK,EAAIgK,EACnB,OAAO,OAAO,OAAOV,EAAK,CACxB,CAACtM,CAAG,EAAGiN,GAAqBjK,CAAK,CACnC,CAAC,CACH,EAAG,CAAC,CAAC,CACP,CACA,IAAI,aAAc,CAChB,OAAO,MAAM,KAAK,KAAK,cAAc,CACvC,CACF,CACA,SAASkK,GAAiBlK,EAAO,CAC/B,OAAOA,aAAiB,SAAWA,EAAM,WAAa,EACxD,CACA,SAASiK,GAAqBjK,EAAO,CACnC,GAAI,CAACkK,GAAiBlK,CAAK,EACzB,OAAOA,EAET,GAAIA,EAAM,OACR,MAAMA,EAAM,OAEd,OAAOA,EAAM,KACf,CACA,MAAMmK,GAAQ,SAAetB,EAAMC,EAAM,CACnCA,IAAS,SACXA,EAAO,CAAC,GAEV,IAAIC,EAAe,OAAOD,GAAS,SAAW,CAC5C,OAAQA,CACV,EAAIA,EACJ,OAAO,IAAII,GAAaL,EAAME,CAAY,CAC5C,EAKMqB,GAAW,SAAkBxK,EAAKkJ,EAAM,CACxCA,IAAS,SACXA,EAAO,KAET,IAAIC,EAAeD,EACf,OAAOC,GAAiB,SAC1BA,EAAe,CACb,OAAQA,CACV,EACS,OAAOA,EAAa,QAAW,cACxCA,EAAa,OAAS,KAExB,IAAIC,EAAU,IAAI,QAAQD,EAAa,OAAO,EAC9C,OAAAC,EAAQ,IAAI,WAAYpJ,CAAG,EACpB,IAAI,SAAS,KAAMhD,EAAS,CAAC,EAAGmM,EAAc,CACnD,QAAAC,CACF,CAAC,CAAC,CACJ,EAMMqB,GAAmB,CAACzK,EAAKkJ,IAAS,CACtC,IAAIwB,EAAWF,GAASxK,EAAKkJ,CAAI,EACjC,OAAAwB,EAAS,QAAQ,IAAI,0BAA2B,MAAM,EAC/CA,CACT,EASA,MAAMC,EAAkB,CACtB,YAAYC,EAAQC,EAAY5B,EAAM6B,EAAU,CAC1CA,IAAa,SACfA,EAAW,IAEb,KAAK,OAASF,EACd,KAAK,WAAaC,GAAc,GAChC,KAAK,SAAWC,EACZ7B,aAAgB,OAClB,KAAK,KAAOA,EAAK,SAAS,EAC1B,KAAK,MAAQA,GAEb,KAAK,KAAOA,CAEhB,CACF,CAKA,SAAS8B,GAAqB3J,EAAO,CACnC,OAAOA,GAAS,MAAQ,OAAOA,EAAM,QAAW,UAAY,OAAOA,EAAM,YAAe,UAAY,OAAOA,EAAM,UAAa,WAAa,SAAUA,CACvJ,CAEA,MAAM4J,GAA0B,CAAC,OAAQ,MAAO,QAAS,QAAQ,EAC3DC,GAAuB,IAAI,IAAID,EAAuB,EACtDE,GAAyB,CAAC,MAAO,GAAGF,EAAuB,EAC3DG,GAAsB,IAAI,IAAID,EAAsB,EACpDE,GAAsB,IAAI,IAAI,CAAC,IAAK,IAAK,IAAK,IAAK,GAAG,CAAC,EACvDC,GAAoC,IAAI,IAAI,CAAC,IAAK,GAAG,CAAC,EACtDC,GAAkB,CACtB,MAAO,OACP,SAAU,OACV,WAAY,OACZ,WAAY,OACZ,YAAa,OACb,SAAU,OACV,KAAM,OACN,KAAM,MACR,EACMC,GAAe,CACnB,MAAO,OACP,KAAM,OACN,WAAY,OACZ,WAAY,OACZ,YAAa,OACb,SAAU,OACV,KAAM,OACN,KAAM,MACR,EACMC,GAAe,CACnB,MAAO,YACP,QAAS,OACT,MAAO,OACP,SAAU,MACZ,EACMC,GAAqB,gCACrBC,GAA4BhK,IAAU,CAC1C,iBAAkB,EAAQA,EAAM,gBAClC,GACMiK,GAA0B,2BAQhC,SAASC,GAAa1C,EAAM,CAC1B,MAAM2C,EAAe3C,EAAK,OAASA,EAAK,OAAS,OAAO,QAAW,YAAc,OAAS,OACpF4C,EAAY,OAAOD,GAAiB,aAAe,OAAOA,EAAa,UAAa,aAAe,OAAOA,EAAa,SAAS,eAAkB,YAClJE,EAAW,CAACD,EAClB3L,EAAU+I,EAAK,OAAO,OAAS,EAAG,2DAA2D,EAC7F,IAAIrH,EACJ,GAAIqH,EAAK,mBACPrH,EAAqBqH,EAAK,2BACjBA,EAAK,oBAAqB,CAEnC,IAAI8C,EAAsB9C,EAAK,oBAC/BrH,EAAqBH,IAAU,CAC7B,iBAAkBsK,EAAoBtK,CAAK,CAC7C,EACF,MACEG,EAAqB6J,GAGvB,IAAI3J,EAAW,CAAC,EAEZkK,EAAatK,GAA0BuH,EAAK,OAAQrH,EAAoB,OAAWE,CAAQ,EAC3FmK,EACA5J,EAAW4G,EAAK,UAAY,IAC5BiD,EAAmBjD,EAAK,uBAAyBkD,GACjDC,EAAwBnD,EAAK,2BAE7BoD,EAAStP,EAAS,CACpB,kBAAmB,GACnB,uBAAwB,GACxB,oBAAqB,GACrB,mBAAoB,GACpB,qBAAsB,GACtB,+BAAgC,EAClC,EAAGkM,EAAK,MAAM,EAEVqD,EAAkB,KAElBC,EAAc,IAAI,IAElBC,EAAuB,KAEvBC,EAA0B,KAE1BC,EAAoB,KAOpBC,EAAwB1D,EAAK,eAAiB,KAC9C2D,EAAiBzK,GAAY6J,EAAY/C,EAAK,QAAQ,SAAU5G,CAAQ,EACxEwK,EAAgB,KACpB,GAAID,GAAkB,MAAQ,CAACR,EAAuB,CAGpD,IAAIjL,EAAQ2L,EAAuB,IAAK,CACtC,SAAU7D,EAAK,QAAQ,SAAS,QAClC,CAAC,EACG,CACF,QAAArG,EACA,MAAAnB,CACF,EAAIsL,GAAuBf,CAAU,EACrCY,EAAiBhK,EACjBiK,EAAgB,CACd,CAACpL,EAAM,EAAE,EAAGN,CACd,CACF,CAOIyL,GAAkBR,GAAyB,CAACnD,EAAK,eACpC+D,GAAcJ,EAAgBZ,EAAY/C,EAAK,QAAQ,SAAS,QAAQ,EAC1E,SACX2D,EAAiB,MAGrB,IAAIK,EACJ,GAAI,CAACL,EAEHK,EAAc,GACdL,EAAiB,CAAC,UACTA,EAAe,KAAKM,GAAKA,EAAE,MAAM,IAAI,EAG9CD,EAAc,WACL,CAACL,EAAe,KAAKM,GAAKA,EAAE,MAAM,MAAM,EAEjDD,EAAc,WACLZ,EAAO,oBAAqB,CAIrC,IAAInJ,EAAa+F,EAAK,cAAgBA,EAAK,cAAc,WAAa,KAClEkE,EAASlE,EAAK,cAAgBA,EAAK,cAAc,OAAS,KAC1DmE,EAAqBF,GAElBA,EAAE,MAAM,OAIT,OAAOA,EAAE,MAAM,QAAW,YAAcA,EAAE,MAAM,OAAO,UAAY,GAC9D,GAGFhK,GAAcA,EAAWgK,EAAE,MAAM,EAAE,IAAM,QAAaC,GAAUA,EAAOD,EAAE,MAAM,EAAE,IAAM,OAPrF,GAUX,GAAIC,EAAQ,CACV,IAAIlF,EAAM2E,EAAe,UAAUM,GAAKC,EAAOD,EAAE,MAAM,EAAE,IAAM,MAAS,EACxED,EAAcL,EAAe,MAAM,EAAG3E,EAAM,CAAC,EAAE,MAAMmF,CAAkB,CACzE,MACEH,EAAcL,EAAe,MAAMQ,CAAkB,CAEzD,MAGEH,EAAchE,EAAK,eAAiB,KAEtC,IAAIoE,EACAhP,EAAQ,CACV,cAAe4K,EAAK,QAAQ,OAC5B,SAAUA,EAAK,QAAQ,SACvB,QAAS2D,EACT,YAAAK,EACA,WAAY5B,GAEZ,sBAAuBpC,EAAK,eAAiB,KAAO,GAAQ,KAC5D,mBAAoB,GACpB,aAAc,OACd,WAAYA,EAAK,eAAiBA,EAAK,cAAc,YAAc,CAAC,EACpE,WAAYA,EAAK,eAAiBA,EAAK,cAAc,YAAc,KACnE,OAAQA,EAAK,eAAiBA,EAAK,cAAc,QAAU4D,EAC3D,SAAU,IAAI,IACd,SAAU,IAAI,GAChB,EAGIS,EAAgBlQ,EAAO,IAGvBmQ,EAA4B,GAE5BC,EAEAC,EAA+B,GAE/BC,EAAyB,IAAI,IAE7BC,GAA8B,KAG9BC,GAA8B,GAK9BC,GAAyB,GAGzBC,GAA0B,CAAC,EAG3BC,GAAwB,CAAC,EAEzBC,EAAmB,IAAI,IAEvBC,GAAqB,EAIrBC,GAA0B,GAE1BC,GAAiB,IAAI,IAErBC,GAAmB,IAAI,IAEvBC,GAAmB,IAAI,IAEvBC,GAAiB,IAAI,IAGrBC,GAAkB,IAAI,IAKtBC,GAAkB,IAAI,IAGtBC,GAAmB,IAAI,IAGvBC,GAAqB,IAAI,IAGzBC,GAA0B,GAI9B,SAASC,IAAa,CAmDpB,GAhDAtC,EAAkBrD,EAAK,QAAQ,OAAOxI,GAAQ,CAC5C,GAAI,CACF,OAAQoO,EACR,SAAAvQ,EACA,MAAAQ,CACF,EAAI2B,EAGJ,GAAIkO,GAAyB,CAC3BA,GAA0B,GAC1B,MACF,CACAnQ,GAAQiQ,GAAiB,OAAS,GAAK3P,GAAS,KAAM,4YAAqa,EAC3d,IAAIgQ,EAAaC,GAAsB,CACrC,gBAAiB1Q,EAAM,SACvB,aAAcC,EACd,cAAAuQ,CACF,CAAC,EACD,GAAIC,GAAchQ,GAAS,KAAM,CAE/B6P,GAA0B,GAC1B1F,EAAK,QAAQ,GAAGnK,EAAQ,EAAE,EAE1BkQ,GAAcF,EAAY,CACxB,MAAO,UACP,SAAAxQ,EACA,SAAU,CACR0Q,GAAcF,EAAY,CACxB,MAAO,aACP,QAAS,OACT,MAAO,OACP,SAAAxQ,CACF,CAAC,EAED2K,EAAK,QAAQ,GAAGnK,CAAK,CACvB,EACA,OAAQ,CACN,IAAImQ,EAAW,IAAI,IAAI5Q,EAAM,QAAQ,EACrC4Q,EAAS,IAAIH,EAAYvD,EAAY,EACrC2D,GAAY,CACV,SAAAD,CACF,CAAC,CACH,CACF,CAAC,EACD,MACF,CACA,OAAOE,GAAgBN,EAAevQ,CAAQ,CAChD,CAAC,EACGuN,EAAW,CAGbuD,GAA0BxD,EAAc8B,CAAsB,EAC9D,IAAI2B,EAA0B,IAAMC,GAA0B1D,EAAc8B,CAAsB,EAClG9B,EAAa,iBAAiB,WAAYyD,CAAuB,EACjE1B,GAA8B,IAAM/B,EAAa,oBAAoB,WAAYyD,CAAuB,CAC1G,CAMA,OAAKhR,EAAM,aACT8Q,GAAgB/R,EAAO,IAAKiB,EAAM,SAAU,CAC1C,iBAAkB,EACpB,CAAC,EAEIgP,CACT,CAEA,SAASkC,IAAU,CACbjD,GACFA,EAAgB,EAEdqB,IACFA,GAA4B,EAE9BpB,EAAY,MAAM,EAClBiB,GAA+BA,EAA4B,MAAM,EACjEnP,EAAM,SAAS,QAAQ,CAAC0I,EAAG5J,IAAQqS,GAAcrS,CAAG,CAAC,EACrDkB,EAAM,SAAS,QAAQ,CAAC0I,EAAG5J,IAAQsS,GAActS,CAAG,CAAC,CACvD,CAEA,SAASuS,GAAU1Q,EAAI,CACrB,OAAAuN,EAAY,IAAIvN,CAAE,EACX,IAAMuN,EAAY,OAAOvN,CAAE,CACpC,CAEA,SAASkQ,GAAYS,EAAUC,EAAM,CAC/BA,IAAS,SACXA,EAAO,CAAC,GAEVvR,EAAQtB,EAAS,CAAC,EAAGsB,EAAOsR,CAAQ,EAGpC,IAAIE,EAAoB,CAAC,EACrBC,EAAsB,CAAC,EACvBzD,EAAO,mBACThO,EAAM,SAAS,QAAQ,CAAC0R,EAAS5S,IAAQ,CACnC4S,EAAQ,QAAU,SAChBxB,GAAgB,IAAIpR,CAAG,EAEzB2S,EAAoB,KAAK3S,CAAG,EAI5B0S,EAAkB,KAAK1S,CAAG,EAGhC,CAAC,EAKH,CAAC,GAAGoP,CAAW,EAAE,QAAQxC,GAAcA,EAAW1L,EAAO,CACvD,gBAAiByR,EACjB,4BAA6BF,EAAK,mBAClC,mBAAoBA,EAAK,YAAc,EACzC,CAAC,CAAC,EAEEvD,EAAO,oBACTwD,EAAkB,QAAQ1S,GAAOkB,EAAM,SAAS,OAAOlB,CAAG,CAAC,EAC3D2S,EAAoB,QAAQ3S,GAAOqS,GAAcrS,CAAG,CAAC,EAEzD,CAMA,SAAS6S,GAAmB1R,EAAUqR,EAAUM,EAAO,CACrD,IAAIC,EAAiBC,EACrB,GAAI,CACF,UAAAC,CACF,EAAIH,IAAU,OAAS,CAAC,EAAIA,EAMxBI,EAAiBhS,EAAM,YAAc,MAAQA,EAAM,WAAW,YAAc,MAAQiS,GAAiBjS,EAAM,WAAW,UAAU,GAAKA,EAAM,WAAW,QAAU,aAAe6R,EAAkB5R,EAAS,QAAU,KAAO,OAAS4R,EAAgB,eAAiB,GACrQK,EACAZ,EAAS,WACP,OAAO,KAAKA,EAAS,UAAU,EAAE,OAAS,EAC5CY,EAAaZ,EAAS,WAGtBY,EAAa,KAENF,EAETE,EAAalS,EAAM,WAGnBkS,EAAa,KAGf,IAAIrN,EAAayM,EAAS,WAAaa,GAAgBnS,EAAM,WAAYsR,EAAS,WAAYA,EAAS,SAAW,CAAC,EAAGA,EAAS,MAAM,EAAItR,EAAM,WAG3I4Q,EAAW5Q,EAAM,SACjB4Q,EAAS,KAAO,IAClBA,EAAW,IAAI,IAAIA,CAAQ,EAC3BA,EAAS,QAAQ,CAAClI,EAAGiD,IAAMiF,EAAS,IAAIjF,EAAGuB,EAAY,CAAC,GAI1D,IAAIkF,EAAqBlD,IAA8B,IAAQlP,EAAM,WAAW,YAAc,MAAQiS,GAAiBjS,EAAM,WAAW,UAAU,KAAO8R,EAAmB7R,EAAS,QAAU,KAAO,OAAS6R,EAAiB,eAAiB,GAE7OlE,IACFD,EAAaC,EACbA,EAAqB,QAEnB2B,IAAwCN,IAAkBlQ,EAAO,MAAgBkQ,IAAkBlQ,EAAO,KAC5G6L,EAAK,QAAQ,KAAK3K,EAAUA,EAAS,KAAK,EACjCgP,IAAkBlQ,EAAO,SAClC6L,EAAK,QAAQ,QAAQ3K,EAAUA,EAAS,KAAK,GAE/C,IAAIoS,EAEJ,GAAIpD,IAAkBlQ,EAAO,IAAK,CAEhC,IAAIuT,EAAajD,EAAuB,IAAIrP,EAAM,SAAS,QAAQ,EAC/DsS,GAAcA,EAAW,IAAIrS,EAAS,QAAQ,EAChDoS,EAAqB,CACnB,gBAAiBrS,EAAM,SACvB,aAAcC,CAChB,EACSoP,EAAuB,IAAIpP,EAAS,QAAQ,IAGrDoS,EAAqB,CACnB,gBAAiBpS,EACjB,aAAcD,EAAM,QACtB,EAEJ,SAAWoP,EAA8B,CAEvC,IAAImD,EAAUlD,EAAuB,IAAIrP,EAAM,SAAS,QAAQ,EAC5DuS,EACFA,EAAQ,IAAItS,EAAS,QAAQ,GAE7BsS,EAAU,IAAI,IAAI,CAACtS,EAAS,QAAQ,CAAC,EACrCoP,EAAuB,IAAIrP,EAAM,SAAS,SAAUuS,CAAO,GAE7DF,EAAqB,CACnB,gBAAiBrS,EAAM,SACvB,aAAcC,CAChB,CACF,CACA4Q,GAAYnS,EAAS,CAAC,EAAG4S,EAAU,CACjC,WAAAY,EACA,WAAArN,EACA,cAAeoK,EACf,SAAAhP,EACA,YAAa,GACb,WAAY+M,GACZ,aAAc,OACd,sBAAuBwF,GAAuBvS,EAAUqR,EAAS,SAAWtR,EAAM,OAAO,EACzF,mBAAAoS,EACA,SAAAxB,CACF,CAAC,EAAG,CACF,mBAAAyB,EACA,UAAWN,IAAc,EAC3B,CAAC,EAED9C,EAAgBlQ,EAAO,IACvBmQ,EAA4B,GAC5BE,EAA+B,GAC/BG,GAA8B,GAC9BC,GAAyB,GACzBC,GAA0B,CAAC,EAC3BC,GAAwB,CAAC,CAC3B,CAGA,eAAe+C,GAAS1S,EAAIwR,EAAM,CAChC,GAAI,OAAOxR,GAAO,SAAU,CAC1B6K,EAAK,QAAQ,GAAG7K,CAAE,EAClB,MACF,CACA,IAAI2S,EAAiBC,GAAY3S,EAAM,SAAUA,EAAM,QAASgE,EAAUgK,EAAO,mBAAoBjO,EAAIiO,EAAO,qBAAsBuD,GAAQ,KAAO,OAASA,EAAK,YAAaA,GAAQ,KAAO,OAASA,EAAK,QAAQ,EACjN,CACF,KAAAjR,EACA,WAAAsS,EACA,MAAA9P,CACF,EAAI+P,GAAyB7E,EAAO,uBAAwB,GAAO0E,EAAgBnB,CAAI,EACnFuB,EAAkB9S,EAAM,SACxBQ,EAAeN,GAAeF,EAAM,SAAUM,EAAMiR,GAAQA,EAAK,KAAK,EAM1E/Q,EAAe9B,EAAS,CAAC,EAAG8B,EAAcoK,EAAK,QAAQ,eAAepK,CAAY,CAAC,EACnF,IAAIuS,EAAcxB,GAAQA,EAAK,SAAW,KAAOA,EAAK,QAAU,OAC5Df,EAAgBzR,EAAO,KACvBgU,IAAgB,GAClBvC,EAAgBzR,EAAO,QACdgU,IAAgB,IAAkBH,GAAc,MAAQX,GAAiBW,EAAW,UAAU,GAAKA,EAAW,aAAe5S,EAAM,SAAS,SAAWA,EAAM,SAAS,SAK/KwQ,EAAgBzR,EAAO,SAEzB,IAAIqT,EAAqBb,GAAQ,uBAAwBA,EAAOA,EAAK,qBAAuB,GAAO,OAC/FQ,GAAaR,GAAQA,EAAK,sBAAwB,GAClDd,EAAaC,GAAsB,CACrC,gBAAAoC,EACA,aAAAtS,EACA,cAAAgQ,CACF,CAAC,EACD,GAAIC,EAAY,CAEdE,GAAcF,EAAY,CACxB,MAAO,UACP,SAAUjQ,EACV,SAAU,CACRmQ,GAAcF,EAAY,CACxB,MAAO,aACP,QAAS,OACT,MAAO,OACP,SAAUjQ,CACZ,CAAC,EAEDiS,GAAS1S,EAAIwR,CAAI,CACnB,EACA,OAAQ,CACN,IAAIX,EAAW,IAAI,IAAI5Q,EAAM,QAAQ,EACrC4Q,EAAS,IAAIH,EAAYvD,EAAY,EACrC2D,GAAY,CACV,SAAAD,CACF,CAAC,CACH,CACF,CAAC,EACD,MACF,CACA,OAAO,MAAME,GAAgBN,EAAehQ,EAAc,CACxD,WAAAoS,EAGA,aAAc9P,EACd,mBAAAsP,EACA,QAASb,GAAQA,EAAK,QACtB,qBAAsBA,GAAQA,EAAK,wBACnC,UAAAQ,CACF,CAAC,CACH,CAIA,SAASiB,IAAa,CAOpB,GANAC,GAAqB,EACrBpC,GAAY,CACV,aAAc,SAChB,CAAC,EAGG7Q,EAAM,WAAW,QAAU,aAM/B,IAAIA,EAAM,WAAW,QAAU,OAAQ,CACrC8Q,GAAgB9Q,EAAM,cAAeA,EAAM,SAAU,CACnD,+BAAgC,EAClC,CAAC,EACD,MACF,CAIA8Q,GAAgB7B,GAAiBjP,EAAM,cAAeA,EAAM,WAAW,SAAU,CAC/E,mBAAoBA,EAAM,UAC5B,CAAC,EACH,CAIA,eAAe8Q,GAAgBN,EAAevQ,EAAUsR,EAAM,CAI5DpC,GAA+BA,EAA4B,MAAM,EACjEA,EAA8B,KAC9BF,EAAgBuB,EAChBjB,IAA+BgC,GAAQA,EAAK,kCAAoC,GAGhF2B,GAAmBlT,EAAM,SAAUA,EAAM,OAAO,EAChDkP,GAA6BqC,GAAQA,EAAK,sBAAwB,GAClEnC,GAAgCmC,GAAQA,EAAK,wBAA0B,GACvE,IAAI4B,EAAcvF,GAAsBD,EACpCyF,EAAoB7B,GAAQA,EAAK,mBACjChN,EAAUT,GAAYqP,EAAalT,EAAU+D,CAAQ,EACrD+N,GAAaR,GAAQA,EAAK,aAAe,GACzC8B,EAAW1E,GAAcpK,EAAS4O,EAAalT,EAAS,QAAQ,EAKpE,GAJIoT,EAAS,QAAUA,EAAS,UAC9B9O,EAAU8O,EAAS,SAGjB,CAAC9O,EAAS,CACZ,GAAI,CACF,MAAAzB,EACA,gBAAAwQ,GACA,MAAAlQ,CACF,EAAImQ,GAAsBtT,EAAS,QAAQ,EAC3C0R,GAAmB1R,EAAU,CAC3B,QAASqT,GACT,WAAY,CAAC,EACb,OAAQ,CACN,CAAClQ,EAAM,EAAE,EAAGN,CACd,CACF,EAAG,CACD,UAAAiP,CACF,CAAC,EACD,MACF,CAOA,GAAI/R,EAAM,aAAe,CAACwP,IAA0BgE,GAAiBxT,EAAM,SAAUC,CAAQ,GAAK,EAAEsR,GAAQA,EAAK,YAAcU,GAAiBV,EAAK,WAAW,UAAU,GAAI,CAC5KI,GAAmB1R,EAAU,CAC3B,QAAAsE,CACF,EAAG,CACD,UAAAwN,CACF,CAAC,EACD,MACF,CAEA5C,EAA8B,IAAI,gBAClC,IAAIsE,EAAUC,GAAwB9I,EAAK,QAAS3K,EAAUkP,EAA4B,OAAQoC,GAAQA,EAAK,UAAU,EACrHoC,EACJ,GAAIpC,GAAQA,EAAK,aAKfoC,EAAsB,CAACC,GAAoBrP,CAAO,EAAE,MAAM,GAAI,CAC5D,KAAMtB,EAAW,MACjB,MAAOsO,EAAK,YACd,CAAC,UACQA,GAAQA,EAAK,YAAcU,GAAiBV,EAAK,WAAW,UAAU,EAAG,CAElF,IAAIsC,EAAe,MAAMC,GAAaL,EAASxT,EAAUsR,EAAK,WAAYhN,EAAS8O,EAAS,OAAQ,CAClG,QAAS9B,EAAK,QACd,UAAAQ,CACF,CAAC,EACD,GAAI8B,EAAa,eACf,OAIF,GAAIA,EAAa,oBAAqB,CACpC,GAAI,CAACE,GAAShO,CAAM,EAAI8N,EAAa,oBACrC,GAAIG,EAAcjO,CAAM,GAAK0G,GAAqB1G,EAAO,KAAK,GAAKA,EAAO,MAAM,SAAW,IAAK,CAC9FoJ,EAA8B,KAC9BwC,GAAmB1R,EAAU,CAC3B,QAAS4T,EAAa,QACtB,WAAY,CAAC,EACb,OAAQ,CACN,CAACE,EAAO,EAAGhO,EAAO,KACpB,CACF,CAAC,EACD,MACF,CACF,CACAxB,EAAUsP,EAAa,SAAWtP,EAClCoP,EAAsBE,EAAa,oBACnCT,EAAoBa,GAAqBhU,EAAUsR,EAAK,UAAU,EAClEQ,EAAY,GAEZsB,EAAS,OAAS,GAElBI,EAAUC,GAAwB9I,EAAK,QAAS6I,EAAQ,IAAKA,EAAQ,MAAM,CAC7E,CAEA,GAAI,CACF,eAAAS,EACA,QAASC,EACT,WAAAtP,EACA,OAAAiK,CACF,EAAI,MAAMsF,GAAcX,EAASxT,EAAUsE,EAAS8O,EAAS,OAAQD,EAAmB7B,GAAQA,EAAK,WAAYA,GAAQA,EAAK,kBAAmBA,GAAQA,EAAK,QAASA,GAAQA,EAAK,mBAAqB,GAAMQ,EAAW4B,CAAmB,EACzOO,IAMJ/E,EAA8B,KAC9BwC,GAAmB1R,EAAUvB,EAAS,CACpC,QAASyV,GAAkB5P,CAC7B,EAAG8P,GAAuBV,CAAmB,EAAG,CAC9C,WAAA9O,EACA,OAAAiK,CACF,CAAC,CAAC,EACJ,CAGA,eAAegF,GAAaL,EAASxT,EAAU2S,EAAYrO,EAAS+P,EAAY/C,EAAM,CAChFA,IAAS,SACXA,EAAO,CAAC,GAEV0B,GAAqB,EAErB,IAAIsB,EAAaC,GAAwBvU,EAAU2S,CAAU,EAM7D,GALA/B,GAAY,CACV,WAAA0D,CACF,EAAG,CACD,UAAWhD,EAAK,YAAc,EAChC,CAAC,EACG+C,EAAY,CACd,IAAIG,EAAiB,MAAMC,GAAenQ,EAAStE,EAAS,SAAUwT,EAAQ,MAAM,EACpF,GAAIgB,EAAe,OAAS,UAC1B,MAAO,CACL,eAAgB,EAClB,EACK,GAAIA,EAAe,OAAS,QAAS,CAC1C,GAAI,CACF,WAAAE,EACA,MAAA7R,CACF,EAAI8R,GAAyB3U,EAAS,SAAUwU,CAAc,EAC9D,MAAO,CACL,QAASA,EAAe,eACxB,oBAAqB,CAACE,EAAY,CAChC,KAAM1R,EAAW,MACjB,MAAAH,CACF,CAAC,CACH,CACF,SAAY2R,EAAe,QAczBlQ,EAAUkQ,EAAe,YAdS,CAClC,GAAI,CACF,gBAAAnB,EACA,MAAAxQ,EACA,MAAAM,CACF,EAAImQ,GAAsBtT,EAAS,QAAQ,EAC3C,MAAO,CACL,QAASqT,EACT,oBAAqB,CAAClQ,EAAM,GAAI,CAC9B,KAAMH,EAAW,MACjB,MAAAH,CACF,CAAC,CACH,CACF,CAGF,CAEA,IAAIiD,EACA8O,EAAcC,GAAevQ,EAAStE,CAAQ,EAClD,GAAI,CAAC4U,EAAY,MAAM,QAAU,CAACA,EAAY,MAAM,KAClD9O,EAAS,CACP,KAAM9C,EAAW,MACjB,MAAOwL,EAAuB,IAAK,CACjC,OAAQgF,EAAQ,OAChB,SAAUxT,EAAS,SACnB,QAAS4U,EAAY,MAAM,EAC7B,CAAC,CACH,UAGA9O,GADc,MAAMgP,GAAiB,SAAUtB,EAAS,CAACoB,CAAW,EAAGtQ,CAAO,GAC7D,CAAC,EACdkP,EAAQ,OAAO,QACjB,MAAO,CACL,eAAgB,EAClB,EAGJ,GAAIuB,GAAiBjP,CAAM,EAAG,CAC5B,IAAIhD,EACJ,OAAIwO,GAAQA,EAAK,SAAW,KAC1BxO,EAAUwO,EAAK,QAMfxO,EADekS,GAA0BlP,EAAO,SAAS,QAAQ,IAAI,UAAU,EAAG,IAAI,IAAI0N,EAAQ,GAAG,EAAGzP,CAAQ,IACzFhE,EAAM,SAAS,SAAWA,EAAM,SAAS,OAElE,MAAMkV,GAAwBzB,EAAS1N,EAAQ,CAC7C,WAAA6M,EACA,QAAA7P,CACF,CAAC,EACM,CACL,eAAgB,EAClB,CACF,CACA,GAAIoS,GAAiBpP,CAAM,EACzB,MAAM0I,EAAuB,IAAK,CAChC,KAAM,cACR,CAAC,EAEH,GAAIuF,EAAcjO,CAAM,EAAG,CAGzB,IAAIqP,EAAgBxB,GAAoBrP,EAASsQ,EAAY,MAAM,EAAE,EAMrE,OAAKtD,GAAQA,EAAK,WAAa,KAC7BtC,EAAgBlQ,EAAO,MAElB,CACL,QAAAwF,EACA,oBAAqB,CAAC6Q,EAAc,MAAM,GAAIrP,CAAM,CACtD,CACF,CACA,MAAO,CACL,QAAAxB,EACA,oBAAqB,CAACsQ,EAAY,MAAM,GAAI9O,CAAM,CACpD,CACF,CAGA,eAAeqO,GAAcX,EAASxT,EAAUsE,EAAS+P,EAAYe,EAAoBzC,EAAY0C,EAAmBvS,EAASwS,EAAkBxD,EAAW4B,EAAqB,CAEjL,IAAIP,EAAoBiC,GAAsBpB,GAAqBhU,EAAU2S,CAAU,EAGnF4C,EAAmB5C,GAAc0C,GAAqBG,GAA4BrC,CAAiB,EAOnGsC,EAA8B,CAACnG,KAAgC,CAACvB,EAAO,qBAAuB,CAACuH,GAMnG,GAAIjB,EAAY,CACd,GAAIoB,EAA6B,CAC/B,IAAIxD,EAAayD,GAAqBhC,CAAmB,EACzD9C,GAAYnS,EAAS,CACnB,WAAY0U,CACd,EAAGlB,IAAe,OAAY,CAC5B,WAAAA,CACF,EAAI,CAAC,CAAC,EAAG,CACP,UAAAH,CACF,CAAC,CACH,CACA,IAAI0C,EAAiB,MAAMC,GAAenQ,EAAStE,EAAS,SAAUwT,EAAQ,MAAM,EACpF,GAAIgB,EAAe,OAAS,UAC1B,MAAO,CACL,eAAgB,EAClB,EACK,GAAIA,EAAe,OAAS,QAAS,CAC1C,GAAI,CACF,WAAAE,EACA,MAAA7R,EACF,EAAI8R,GAAyB3U,EAAS,SAAUwU,CAAc,EAC9D,MAAO,CACL,QAASA,EAAe,eACxB,WAAY,CAAC,EACb,OAAQ,CACN,CAACE,CAAU,EAAG7R,EAChB,CACF,CACF,SAAY2R,EAAe,QAczBlQ,EAAUkQ,EAAe,YAdS,CAClC,GAAI,CACF,MAAA3R,EACA,gBAAAwQ,GACA,MAAAlQ,CACF,EAAImQ,GAAsBtT,EAAS,QAAQ,EAC3C,MAAO,CACL,QAASqT,GACT,WAAY,CAAC,EACb,OAAQ,CACN,CAAClQ,EAAM,EAAE,EAAGN,CACd,CACF,CACF,CAGF,CACA,IAAIqQ,EAAcvF,GAAsBD,EACpC,CAACiI,GAAeC,CAAoB,EAAIC,GAAiBlL,EAAK,QAAS5K,EAAOuE,EAASiR,EAAkBvV,EAAU+N,EAAO,qBAAuBuH,IAAqB,GAAMvH,EAAO,+BAAgCwB,GAAwBC,GAAyBC,GAAuBQ,GAAiBF,GAAkBD,GAAkBoD,EAAanP,EAAU2P,CAAmB,EAO9X,GAHAoC,GAAsBhC,GAAW,EAAExP,GAAWA,EAAQ,KAAKsK,GAAKA,EAAE,MAAM,KAAOkF,CAAO,IAAM6B,IAAiBA,GAAc,KAAK/G,GAAKA,EAAE,MAAM,KAAOkF,CAAO,CAAC,EAC5JlE,GAA0B,EAAED,GAExBgG,GAAc,SAAW,GAAKC,EAAqB,SAAW,EAAG,CACnE,IAAIG,EAAkBC,GAAuB,EAC7C,OAAAtE,GAAmB1R,EAAUvB,EAAS,CACpC,QAAA6F,EACA,WAAY,CAAC,EAEb,OAAQoP,GAAuBK,EAAcL,EAAoB,CAAC,CAAC,EAAI,CACrE,CAACA,EAAoB,CAAC,CAAC,EAAGA,EAAoB,CAAC,EAAE,KACnD,EAAI,IACN,EAAGU,GAAuBV,CAAmB,EAAGqC,EAAkB,CAChE,SAAU,IAAI,IAAIhW,EAAM,QAAQ,CAClC,EAAI,CAAC,CAAC,EAAG,CACP,UAAA+R,CACF,CAAC,EACM,CACL,eAAgB,EAClB,CACF,CACA,GAAI2D,EAA6B,CAC/B,IAAIQ,EAAU,CAAC,EACf,GAAI,CAAC5B,EAAY,CAEf4B,EAAQ,WAAa9C,EACrB,IAAIlB,EAAayD,GAAqBhC,CAAmB,EACrDzB,IAAe,SACjBgE,EAAQ,WAAahE,EAEzB,CACI2D,EAAqB,OAAS,IAChCK,EAAQ,SAAWC,GAA+BN,CAAoB,GAExEhF,GAAYqF,EAAS,CACnB,UAAAnE,CACF,CAAC,CACH,CACA8D,EAAqB,QAAQO,GAAM,CAC7BzG,EAAiB,IAAIyG,EAAG,GAAG,GAC7BC,GAAaD,EAAG,GAAG,EAEjBA,EAAG,YAILzG,EAAiB,IAAIyG,EAAG,IAAKA,EAAG,UAAU,CAE9C,CAAC,EAED,IAAIE,GAAiC,IAAMT,EAAqB,QAAQU,GAAKF,GAAaE,EAAE,GAAG,CAAC,EAC5FpH,GACFA,EAA4B,OAAO,iBAAiB,QAASmH,EAA8B,EAE7F,GAAI,CACF,cAAAE,GACA,eAAAC,EACF,EAAI,MAAMC,GAA+B1W,EAAM,QAASuE,EAASqR,GAAeC,EAAsBpC,CAAO,EAC7G,GAAIA,EAAQ,OAAO,QACjB,MAAO,CACL,eAAgB,EAClB,EAKEtE,GACFA,EAA4B,OAAO,oBAAoB,QAASmH,EAA8B,EAEhGT,EAAqB,QAAQO,GAAMzG,EAAiB,OAAOyG,EAAG,GAAG,CAAC,EAElE,IAAIlK,GAAWyK,GAAa,CAAC,GAAGH,GAAe,GAAGC,EAAc,CAAC,EACjE,GAAIvK,GAAU,CACZ,GAAIA,GAAS,KAAO0J,GAAc,OAAQ,CAIxC,IAAIgB,EAAaf,EAAqB3J,GAAS,IAAM0J,GAAc,MAAM,EAAE,IAC3E7F,GAAiB,IAAI6G,CAAU,CACjC,CACA,aAAM1B,GAAwBzB,EAASvH,GAAS,OAAQ,CACtD,QAAAnJ,CACF,CAAC,EACM,CACL,eAAgB,EAClB,CACF,CAEA,GAAI,CACF,WAAA8B,GACA,OAAAiK,EACF,EAAI+H,GAAkB7W,EAAOuE,EAASqR,GAAeY,GAAe7C,EAAqBkC,EAAsBY,GAAgBtG,EAAe,EAE9IA,GAAgB,QAAQ,CAAC2G,EAAc/C,IAAY,CACjD+C,EAAa,UAAUtL,IAAW,EAI5BA,IAAWsL,EAAa,OAC1B3G,GAAgB,OAAO4D,CAAO,CAElC,CAAC,CACH,CAAC,EAEG/F,EAAO,qBAAuBuH,GAAoBvV,EAAM,QAC1D,OAAO,QAAQA,EAAM,MAAM,EAAE,OAAOqL,GAAS,CAC3C,GAAI,CAAC1H,CAAE,EAAI0H,EACX,MAAO,CAACuK,GAAc,KAAK/G,IAAKA,GAAE,MAAM,KAAOlL,CAAE,CACnD,CAAC,EAAE,QAAQmI,GAAS,CAClB,GAAI,CAACiI,EAASjR,EAAK,EAAIgJ,EACvBgD,GAAS,OAAO,OAAOA,IAAU,CAAC,EAAG,CACnC,CAACiF,CAAO,EAAGjR,EACb,CAAC,CACH,CAAC,EAEH,IAAIkT,GAAkBC,GAAuB,EACzCc,GAAqBC,GAAqBnH,EAAuB,EACjEoH,GAAuBjB,IAAmBe,IAAsBlB,EAAqB,OAAS,EAClG,OAAOnX,EAAS,CACd,QAAA6F,EACA,WAAAM,GACA,OAAAiK,EACF,EAAGmI,GAAuB,CACxB,SAAU,IAAI,IAAIjX,EAAM,QAAQ,CAClC,EAAI,CAAC,CAAC,CACR,CACA,SAAS2V,GAAqBhC,EAAqB,CACjD,GAAIA,GAAuB,CAACK,EAAcL,EAAoB,CAAC,CAAC,EAI9D,MAAO,CACL,CAACA,EAAoB,CAAC,CAAC,EAAGA,EAAoB,CAAC,EAAE,IACnD,EACK,GAAI3T,EAAM,WACf,OAAI,OAAO,KAAKA,EAAM,UAAU,EAAE,SAAW,EACpC,KAEAA,EAAM,UAGnB,CACA,SAASmW,GAA+BN,EAAsB,CAC5D,OAAAA,EAAqB,QAAQO,GAAM,CACjC,IAAI1E,EAAU1R,EAAM,SAAS,IAAIoW,EAAG,GAAG,EACnCc,EAAsBC,GAAkB,OAAWzF,EAAUA,EAAQ,KAAO,MAAS,EACzF1R,EAAM,SAAS,IAAIoW,EAAG,IAAKc,CAAmB,CAChD,CAAC,EACM,IAAI,IAAIlX,EAAM,QAAQ,CAC/B,CAEA,SAASoX,GAAMtY,EAAKiV,EAAStS,EAAM8P,EAAM,CACvC,GAAI9D,EACF,MAAM,IAAI,MAAM,kMAA4M,EAE1NkC,EAAiB,IAAI7Q,CAAG,GAAGuX,GAAavX,CAAG,EAC/C,IAAIiT,GAAaR,GAAQA,EAAK,sBAAwB,GAClD4B,EAAcvF,GAAsBD,EACpC+E,EAAiBC,GAAY3S,EAAM,SAAUA,EAAM,QAASgE,EAAUgK,EAAO,mBAAoBvM,EAAMuM,EAAO,qBAAsB+F,EAASxC,GAAQ,KAAO,OAASA,EAAK,QAAQ,EAClLhN,EAAUT,GAAYqP,EAAaT,EAAgB1O,CAAQ,EAC3DqP,EAAW1E,GAAcpK,EAAS4O,EAAaT,CAAc,EAIjE,GAHIW,EAAS,QAAUA,EAAS,UAC9B9O,EAAU8O,EAAS,SAEjB,CAAC9O,EAAS,CACZ8S,GAAgBvY,EAAKiV,EAAStF,EAAuB,IAAK,CACxD,SAAUiE,CACZ,CAAC,EAAG,CACF,UAAAX,CACF,CAAC,EACD,MACF,CACA,GAAI,CACF,KAAAzR,EACA,WAAAsS,EACA,MAAA9P,CACF,EAAI+P,GAAyB7E,EAAO,uBAAwB,GAAM0E,EAAgBnB,CAAI,EACtF,GAAIzO,EAAO,CACTuU,GAAgBvY,EAAKiV,EAASjR,EAAO,CACnC,UAAAiP,CACF,CAAC,EACD,MACF,CACA,IAAInN,EAAQkQ,GAAevQ,EAASjE,CAAI,EAExC,GADA4O,GAA6BqC,GAAQA,EAAK,sBAAwB,GAC9DqB,GAAcX,GAAiBW,EAAW,UAAU,EAAG,CACzD0E,GAAoBxY,EAAKiV,EAASzT,EAAMsE,EAAOL,EAAS8O,EAAS,OAAQtB,EAAWa,CAAU,EAC9F,MACF,CAGA5C,GAAiB,IAAIlR,EAAK,CACxB,QAAAiV,EACA,KAAAzT,CACF,CAAC,EACDiX,GAAoBzY,EAAKiV,EAASzT,EAAMsE,EAAOL,EAAS8O,EAAS,OAAQtB,EAAWa,CAAU,CAChG,CAGA,eAAe0E,GAAoBxY,EAAKiV,EAASzT,EAAMsE,EAAO4S,EAAgBlD,EAAYvC,EAAWa,EAAY,CAC/GK,GAAqB,EACrBjD,GAAiB,OAAOlR,CAAG,EAC3B,SAAS2Y,EAAwB5I,EAAG,CAClC,GAAI,CAACA,EAAE,MAAM,QAAU,CAACA,EAAE,MAAM,KAAM,CACpC,IAAI/L,GAAQ2L,EAAuB,IAAK,CACtC,OAAQmE,EAAW,WACnB,SAAUtS,EACV,QAASyT,CACX,CAAC,EACD,OAAAsD,GAAgBvY,EAAKiV,EAASjR,GAAO,CACnC,UAAAiP,CACF,CAAC,EACM,EACT,CACA,MAAO,EACT,CACA,GAAI,CAACuC,GAAcmD,EAAwB7S,CAAK,EAC9C,OAGF,IAAI8S,EAAkB1X,EAAM,SAAS,IAAIlB,CAAG,EAC5C6Y,GAAmB7Y,EAAK8Y,GAAqBhF,EAAY8E,CAAe,EAAG,CACzE,UAAA3F,CACF,CAAC,EACD,IAAI8F,EAAkB,IAAI,gBACtBC,EAAepE,GAAwB9I,EAAK,QAAStK,EAAMuX,EAAgB,OAAQjF,CAAU,EACjG,GAAI0B,EAAY,CACd,IAAIG,EAAiB,MAAMC,GAAe8C,EAAgBlX,EAAMwX,EAAa,MAAM,EACnF,GAAIrD,EAAe,OAAS,UAC1B,OACK,GAAIA,EAAe,OAAS,QAAS,CAC1C,GAAI,CACF,MAAA3R,EACF,EAAI8R,GAAyBtU,EAAMmU,CAAc,EACjD4C,GAAgBvY,EAAKiV,EAASjR,GAAO,CACnC,UAAAiP,CACF,CAAC,EACD,MACF,SAAY0C,EAAe,SAUzB,GAFA+C,EAAiB/C,EAAe,QAChC7P,EAAQkQ,GAAe0C,EAAgBlX,CAAI,EACvCmX,EAAwB7S,CAAK,EAC/B,WAXgC,CAClCyS,GAAgBvY,EAAKiV,EAAStF,EAAuB,IAAK,CACxD,SAAUnO,CACZ,CAAC,EAAG,CACF,UAAAyR,CACF,CAAC,EACD,MACF,CAOF,CAEApC,EAAiB,IAAI7Q,EAAK+Y,CAAe,EACzC,IAAIE,EAAoBnI,GAEpBiE,GADgB,MAAMkB,GAAiB,SAAU+C,EAAc,CAAClT,CAAK,EAAG4S,CAAc,GACzD,CAAC,EAClC,GAAIM,EAAa,OAAO,QAAS,CAG3BnI,EAAiB,IAAI7Q,CAAG,IAAM+Y,GAChClI,EAAiB,OAAO7Q,CAAG,EAE7B,MACF,CAIA,GAAIkP,EAAO,mBAAqBkC,GAAgB,IAAIpR,CAAG,GACrD,GAAIkW,GAAiBnB,CAAY,GAAKG,EAAcH,CAAY,EAAG,CACjE8D,GAAmB7Y,EAAKkZ,GAAe,MAAS,CAAC,EACjD,MACF,MAEK,CACL,GAAIhD,GAAiBnB,CAAY,EAE/B,GADAlE,EAAiB,OAAO7Q,CAAG,EACvB+Q,GAA0BkI,EAAmB,CAK/CJ,GAAmB7Y,EAAKkZ,GAAe,MAAS,CAAC,EACjD,MACF,KACE,QAAAjI,GAAiB,IAAIjR,CAAG,EACxB6Y,GAAmB7Y,EAAKqY,GAAkBvE,CAAU,CAAC,EAC9CsC,GAAwB4C,EAAcjE,EAAc,CACzD,kBAAmBjB,CACrB,CAAC,EAIL,GAAIoB,EAAcH,CAAY,EAAG,CAC/BwD,GAAgBvY,EAAKiV,EAASF,EAAa,KAAK,EAChD,MACF,CACF,CACA,GAAIsB,GAAiBtB,CAAY,EAC/B,MAAMpF,EAAuB,IAAK,CAChC,KAAM,cACR,CAAC,EAIH,IAAIjO,GAAeR,EAAM,WAAW,UAAYA,EAAM,SAClDiY,EAAsBvE,GAAwB9I,EAAK,QAASpK,GAAcqX,EAAgB,MAAM,EAChG1E,GAAcvF,GAAsBD,EACpCpJ,GAAUvE,EAAM,WAAW,QAAU,OAAS8D,GAAYqP,GAAanT,EAAM,WAAW,SAAUgE,CAAQ,EAAIhE,EAAM,QACxH6B,EAAU0C,GAAS,8CAA8C,EACjE,IAAI2T,GAAS,EAAEtI,GACfE,GAAe,IAAIhR,EAAKoZ,EAAM,EAC9B,IAAIC,GAAchB,GAAkBvE,EAAYiB,EAAa,IAAI,EACjE7T,EAAM,SAAS,IAAIlB,EAAKqZ,EAAW,EACnC,GAAI,CAACvC,GAAeC,EAAoB,EAAIC,GAAiBlL,EAAK,QAAS5K,EAAOuE,GAASqO,EAAYpS,GAAc,GAAOwN,EAAO,+BAAgCwB,GAAwBC,GAAyBC,GAAuBQ,GAAiBF,GAAkBD,GAAkBoD,GAAanP,EAAU,CAACY,EAAM,MAAM,GAAIiP,CAAY,CAAC,EAIrVgC,GAAqB,OAAOO,GAAMA,EAAG,MAAQtX,CAAG,EAAE,QAAQsX,GAAM,CAC9D,IAAIgC,GAAWhC,EAAG,IACdsB,GAAkB1X,EAAM,SAAS,IAAIoY,EAAQ,EAC7ClB,GAAsBC,GAAkB,OAAWO,GAAkBA,GAAgB,KAAO,MAAS,EACzG1X,EAAM,SAAS,IAAIoY,GAAUlB,EAAmB,EAC5CvH,EAAiB,IAAIyI,EAAQ,GAC/B/B,GAAa+B,EAAQ,EAEnBhC,EAAG,YACLzG,EAAiB,IAAIyI,GAAUhC,EAAG,UAAU,CAEhD,CAAC,EACDvF,GAAY,CACV,SAAU,IAAI,IAAI7Q,EAAM,QAAQ,CAClC,CAAC,EACD,IAAIsW,GAAiC,IAAMT,GAAqB,QAAQO,GAAMC,GAAaD,EAAG,GAAG,CAAC,EAClGyB,EAAgB,OAAO,iBAAiB,QAASvB,EAA8B,EAC/E,GAAI,CACF,cAAAE,GACA,eAAAC,EACF,EAAI,MAAMC,GAA+B1W,EAAM,QAASuE,GAASqR,GAAeC,GAAsBoC,CAAmB,EACzH,GAAIJ,EAAgB,OAAO,QACzB,OAEFA,EAAgB,OAAO,oBAAoB,QAASvB,EAA8B,EAClFxG,GAAe,OAAOhR,CAAG,EACzB6Q,EAAiB,OAAO7Q,CAAG,EAC3B+W,GAAqB,QAAQ3K,GAAKyE,EAAiB,OAAOzE,EAAE,GAAG,CAAC,EAChE,IAAIgB,EAAWyK,GAAa,CAAC,GAAGH,GAAe,GAAGC,EAAc,CAAC,EACjE,GAAIvK,EAAU,CACZ,GAAIA,EAAS,KAAO0J,GAAc,OAAQ,CAIxC,IAAIgB,EAAaf,GAAqB3J,EAAS,IAAM0J,GAAc,MAAM,EAAE,IAC3E7F,GAAiB,IAAI6G,CAAU,CACjC,CACA,OAAO1B,GAAwB+C,EAAqB/L,EAAS,MAAM,CACrE,CAEA,GAAI,CACF,WAAArH,EACA,OAAAiK,EACF,EAAI+H,GAAkB7W,EAAOA,EAAM,QAAS4V,GAAeY,GAAe,OAAWX,GAAsBY,GAAgBtG,EAAe,EAG1I,GAAInQ,EAAM,SAAS,IAAIlB,CAAG,EAAG,CAC3B,IAAIuZ,EAAcL,GAAenE,EAAa,IAAI,EAClD7T,EAAM,SAAS,IAAIlB,EAAKuZ,CAAW,CACrC,CACArB,GAAqBkB,EAAM,EAIvBlY,EAAM,WAAW,QAAU,WAAakY,GAASrI,IACnDhO,EAAUoN,EAAe,yBAAyB,EAClDE,GAA+BA,EAA4B,MAAM,EACjEwC,GAAmB3R,EAAM,WAAW,SAAU,CAC5C,QAAAuE,GACA,WAAAM,EACA,OAAAiK,GACA,SAAU,IAAI,IAAI9O,EAAM,QAAQ,CAClC,CAAC,IAKD6Q,GAAY,CACV,OAAA/B,GACA,WAAYqD,GAAgBnS,EAAM,WAAY6E,EAAYN,GAASuK,EAAM,EACzE,SAAU,IAAI,IAAI9O,EAAM,QAAQ,CAClC,CAAC,EACDwP,GAAyB,GAE7B,CAEA,eAAe+H,GAAoBzY,EAAKiV,EAASzT,EAAMsE,EAAOL,EAAS+P,EAAYvC,EAAWa,EAAY,CACxG,IAAI8E,EAAkB1X,EAAM,SAAS,IAAIlB,CAAG,EAC5C6Y,GAAmB7Y,EAAKqY,GAAkBvE,EAAY8E,EAAkBA,EAAgB,KAAO,MAAS,EAAG,CACzG,UAAA3F,CACF,CAAC,EACD,IAAI8F,EAAkB,IAAI,gBACtBC,EAAepE,GAAwB9I,EAAK,QAAStK,EAAMuX,EAAgB,MAAM,EACrF,GAAIvD,EAAY,CACd,IAAIG,EAAiB,MAAMC,GAAenQ,EAASjE,EAAMwX,EAAa,MAAM,EAC5E,GAAIrD,EAAe,OAAS,UAC1B,OACK,GAAIA,EAAe,OAAS,QAAS,CAC1C,GAAI,CACF,MAAA3R,EACF,EAAI8R,GAAyBtU,EAAMmU,CAAc,EACjD4C,GAAgBvY,EAAKiV,EAASjR,GAAO,CACnC,UAAAiP,CACF,CAAC,EACD,MACF,SAAY0C,EAAe,QAQzBlQ,EAAUkQ,EAAe,QACzB7P,EAAQkQ,GAAevQ,EAASjE,CAAI,MATF,CAClC+W,GAAgBvY,EAAKiV,EAAStF,EAAuB,IAAK,CACxD,SAAUnO,CACZ,CAAC,EAAG,CACF,UAAAyR,CACF,CAAC,EACD,MACF,CAIF,CAEApC,EAAiB,IAAI7Q,EAAK+Y,CAAe,EACzC,IAAIE,EAAoBnI,GAEpB7J,GADU,MAAMgP,GAAiB,SAAU+C,EAAc,CAAClT,CAAK,EAAGL,CAAO,GACxD,CAAC,EAatB,GARI4Q,GAAiBpP,CAAM,IACzBA,EAAU,MAAMuS,GAAoBvS,EAAQ+R,EAAa,OAAQ,EAAI,GAAM/R,GAIzE4J,EAAiB,IAAI7Q,CAAG,IAAM+Y,GAChClI,EAAiB,OAAO7Q,CAAG,EAEzB,CAAAgZ,EAAa,OAAO,QAKxB,IAAI5H,GAAgB,IAAIpR,CAAG,EAAG,CAC5B6Y,GAAmB7Y,EAAKkZ,GAAe,MAAS,CAAC,EACjD,MACF,CAEA,GAAIhD,GAAiBjP,CAAM,EACzB,GAAI8J,GAA0BkI,EAAmB,CAG/CJ,GAAmB7Y,EAAKkZ,GAAe,MAAS,CAAC,EACjD,MACF,KAAO,CACLjI,GAAiB,IAAIjR,CAAG,EACxB,MAAMoW,GAAwB4C,EAAc/R,CAAM,EAClD,MACF,CAGF,GAAIiO,EAAcjO,CAAM,EAAG,CACzBsR,GAAgBvY,EAAKiV,EAAShO,EAAO,KAAK,EAC1C,MACF,CACAlE,EAAU,CAACsT,GAAiBpP,CAAM,EAAG,iCAAiC,EAEtE4R,GAAmB7Y,EAAKkZ,GAAejS,EAAO,IAAI,CAAC,EACrD,CAoBA,eAAemP,GAAwBzB,EAASvH,EAAUqM,EAAQ,CAChE,GAAI,CACF,WAAA3F,EACA,kBAAA0C,EACA,QAAAvS,CACF,EAAIwV,IAAW,OAAS,CAAC,EAAIA,EACzBrM,EAAS,SAAS,QAAQ,IAAI,oBAAoB,IACpDsD,GAAyB,IAE3B,IAAIvP,EAAWiM,EAAS,SAAS,QAAQ,IAAI,UAAU,EACvDrK,EAAU5B,EAAU,qDAAqD,EACzEA,EAAWgV,GAA0BhV,EAAU,IAAI,IAAIwT,EAAQ,GAAG,EAAGzP,CAAQ,EAC7E,IAAIwU,EAAmBtY,GAAeF,EAAM,SAAUC,EAAU,CAC9D,YAAa,EACf,CAAC,EACD,GAAIuN,EAAW,CACb,IAAIiL,EAAmB,GACvB,GAAIvM,EAAS,SAAS,QAAQ,IAAI,yBAAyB,EAEzDuM,EAAmB,WACVtL,GAAmB,KAAKlN,CAAQ,EAAG,CAC5C,MAAMyB,EAAMkJ,EAAK,QAAQ,UAAU3K,CAAQ,EAC3CwY,EAEA/W,EAAI,SAAW6L,EAAa,SAAS,QAErCpJ,GAAczC,EAAI,SAAUsC,CAAQ,GAAK,IAC3C,CACA,GAAIyU,EAAkB,CAChB1V,EACFwK,EAAa,SAAS,QAAQtN,CAAQ,EAEtCsN,EAAa,SAAS,OAAOtN,CAAQ,EAEvC,MACF,CACF,CAGAkP,EAA8B,KAC9B,IAAIuJ,EAAwB3V,IAAY,GAAOhE,EAAO,QAAUA,EAAO,KAGnE,CACF,WAAA4Z,EACA,WAAAC,EACA,YAAAC,CACF,EAAI7Y,EAAM,WACN,CAAC4S,GAAc,CAAC0C,GAAqBqD,GAAcC,GAAcC,IACnEjG,EAAa6C,GAA4BzV,EAAM,UAAU,GAK3D,IAAIwV,EAAmB5C,GAAc0C,EACrC,GAAIvI,GAAkC,IAAIb,EAAS,SAAS,MAAM,GAAKsJ,GAAoBvD,GAAiBuD,EAAiB,UAAU,EACrI,MAAM1E,GAAgB4H,EAAuBF,EAAkB,CAC7D,WAAY9Z,EAAS,CAAC,EAAG8W,EAAkB,CACzC,WAAYvV,CACd,CAAC,EAED,mBAAoBiP,CACtB,CAAC,MACI,CAGL,IAAImG,EAAqBpB,GAAqBuE,EAAkB5F,CAAU,EAC1E,MAAM9B,GAAgB4H,EAAuBF,EAAkB,CAC7D,mBAAAnD,EAEA,kBAAAC,EAEA,mBAAoBpG,CACtB,CAAC,CACH,CACF,CAGA,eAAe6F,GAAiB+D,EAAMrF,EAASmC,EAAerR,EAAS,CACrE,GAAI,CACF,IAAIwU,EAAU,MAAMC,GAAqBnL,EAAkBiL,EAAMrF,EAASmC,EAAerR,EAASd,EAAUF,CAAkB,EAC9H,OAAO,MAAM,QAAQ,IAAIwV,EAAQ,IAAI,CAAChT,EAAQnH,IAAM,CAClD,GAAIqa,GAAwBlT,CAAM,EAAG,CACnC,IAAIqG,EAAWrG,EAAO,OACtB,MAAO,CACL,KAAM9C,EAAW,SACjB,SAAUiW,GAAyC9M,EAAUqH,EAASmC,EAAchX,CAAC,EAAE,MAAM,GAAI2F,EAASP,EAAUgK,EAAO,oBAAoB,CACjJ,CACF,CACA,OAAOmL,GAAiCpT,CAAM,CAChD,CAAC,CAAC,CACJ,OAASqT,EAAG,CAGV,OAAOxD,EAAc,IAAI,KAAO,CAC9B,KAAM3S,EAAW,MACjB,MAAOmW,CACT,EAAE,CACJ,CACF,CACA,eAAe1C,GAA+B2C,EAAgB9U,EAASqR,EAAe0D,EAAgB7F,EAAS,CAC7G,GAAI,CAAC+C,EAAe,GAAGC,CAAc,EAAI,MAAM,QAAQ,IAAI,CAACb,EAAc,OAASb,GAAiB,SAAUtB,EAASmC,EAAerR,CAAO,EAAI,CAAC,EAAG,GAAG+U,EAAe,IAAI/C,GAAK,CAC9K,GAAIA,EAAE,SAAWA,EAAE,OAASA,EAAE,WAAY,CACxC,IAAIgD,EAAiB7F,GAAwB9I,EAAK,QAAS2L,EAAE,KAAMA,EAAE,WAAW,MAAM,EACtF,OAAOxB,GAAiB,SAAUwE,EAAgB,CAAChD,EAAE,KAAK,EAAGA,EAAE,OAAO,EAAE,KAAKrL,GAAKA,EAAE,CAAC,CAAC,CACxF,KACE,QAAO,QAAQ,QAAQ,CACrB,KAAMjI,EAAW,MACjB,MAAOwL,EAAuB,IAAK,CACjC,SAAU8H,EAAE,IACd,CAAC,CACH,CAAC,CAEL,CAAC,CAAC,CAAC,EACH,aAAM,QAAQ,IAAI,CAACiD,GAAuBH,EAAgBzD,EAAeY,EAAeA,EAAc,IAAI,IAAM/C,EAAQ,MAAM,EAAG,GAAOzT,EAAM,UAAU,EAAGwZ,GAAuBH,EAAgBC,EAAe,IAAI/C,GAAKA,EAAE,KAAK,EAAGE,EAAgB6C,EAAe,IAAI/C,GAAKA,EAAE,WAAaA,EAAE,WAAW,OAAS,IAAI,EAAG,EAAI,CAAC,CAAC,EACvT,CACL,cAAAC,EACA,eAAAC,CACF,CACF,CACA,SAASxD,IAAuB,CAE9BzD,GAAyB,GAGzBC,GAAwB,KAAK,GAAGsG,GAAsB,CAAC,EAEvD/F,GAAiB,QAAQ,CAACtH,EAAG5J,IAAQ,CAC/B6Q,EAAiB,IAAI7Q,CAAG,IAC1B4Q,GAAsB,KAAK5Q,CAAG,EAC9BuX,GAAavX,CAAG,EAEpB,CAAC,CACH,CACA,SAAS6Y,GAAmB7Y,EAAK4S,EAASH,EAAM,CAC1CA,IAAS,SACXA,EAAO,CAAC,GAEVvR,EAAM,SAAS,IAAIlB,EAAK4S,CAAO,EAC/Bb,GAAY,CACV,SAAU,IAAI,IAAI7Q,EAAM,QAAQ,CAClC,EAAG,CACD,WAAYuR,GAAQA,EAAK,aAAe,EAC1C,CAAC,CACH,CACA,SAAS8F,GAAgBvY,EAAKiV,EAASjR,EAAOyO,EAAM,CAC9CA,IAAS,SACXA,EAAO,CAAC,GAEV,IAAI6D,EAAgBxB,GAAoB5T,EAAM,QAAS+T,CAAO,EAC9D5C,GAAcrS,CAAG,EACjB+R,GAAY,CACV,OAAQ,CACN,CAACuE,EAAc,MAAM,EAAE,EAAGtS,CAC5B,EACA,SAAU,IAAI,IAAI9C,EAAM,QAAQ,CAClC,EAAG,CACD,WAAYuR,GAAQA,EAAK,aAAe,EAC1C,CAAC,CACH,CACA,SAASkI,GAAW3a,EAAK,CACvB,OAAIkP,EAAO,oBACTiC,GAAe,IAAInR,GAAMmR,GAAe,IAAInR,CAAG,GAAK,GAAK,CAAC,EAGtDoR,GAAgB,IAAIpR,CAAG,GACzBoR,GAAgB,OAAOpR,CAAG,GAGvBkB,EAAM,SAAS,IAAIlB,CAAG,GAAKmO,EACpC,CACA,SAASkE,GAAcrS,EAAK,CAC1B,IAAI4S,EAAU1R,EAAM,SAAS,IAAIlB,CAAG,EAIhC6Q,EAAiB,IAAI7Q,CAAG,GAAK,EAAE4S,GAAWA,EAAQ,QAAU,WAAa5B,GAAe,IAAIhR,CAAG,IACjGuX,GAAavX,CAAG,EAElBkR,GAAiB,OAAOlR,CAAG,EAC3BgR,GAAe,OAAOhR,CAAG,EACzBiR,GAAiB,OAAOjR,CAAG,EAC3BoR,GAAgB,OAAOpR,CAAG,EAC1BkB,EAAM,SAAS,OAAOlB,CAAG,CAC3B,CACA,SAAS4a,GAA4B5a,EAAK,CACxC,GAAIkP,EAAO,kBAAmB,CAC5B,IAAI2L,GAAS1J,GAAe,IAAInR,CAAG,GAAK,GAAK,EACzC6a,GAAS,GACX1J,GAAe,OAAOnR,CAAG,EACzBoR,GAAgB,IAAIpR,CAAG,GAEvBmR,GAAe,IAAInR,EAAK6a,CAAK,CAEjC,MACExI,GAAcrS,CAAG,EAEnB+R,GAAY,CACV,SAAU,IAAI,IAAI7Q,EAAM,QAAQ,CAClC,CAAC,CACH,CACA,SAASqW,GAAavX,EAAK,CACzB,IAAI8a,EAAajK,EAAiB,IAAI7Q,CAAG,EACzC+C,EAAU+X,EAAY,8BAAgC9a,CAAG,EACzD8a,EAAW,MAAM,EACjBjK,EAAiB,OAAO7Q,CAAG,CAC7B,CACA,SAAS+a,GAAiBC,EAAM,CAC9B,QAAShb,KAAOgb,EAAM,CACpB,IAAIpI,EAAU+H,GAAW3a,CAAG,EACxBuZ,EAAcL,GAAetG,EAAQ,IAAI,EAC7C1R,EAAM,SAAS,IAAIlB,EAAKuZ,CAAW,CACrC,CACF,CACA,SAASpC,IAAyB,CAChC,IAAI8D,EAAW,CAAC,EACZ/D,EAAkB,GACtB,QAASlX,KAAOiR,GAAkB,CAChC,IAAI2B,EAAU1R,EAAM,SAAS,IAAIlB,CAAG,EACpC+C,EAAU6P,EAAS,qBAAuB5S,CAAG,EACzC4S,EAAQ,QAAU,YACpB3B,GAAiB,OAAOjR,CAAG,EAC3Bib,EAAS,KAAKjb,CAAG,EACjBkX,EAAkB,GAEtB,CACA,OAAA6D,GAAiBE,CAAQ,EAClB/D,CACT,CACA,SAASgB,GAAqBgD,EAAU,CACtC,IAAIC,EAAa,CAAC,EAClB,OAAS,CAACnb,EAAK6E,CAAE,IAAKmM,GACpB,GAAInM,EAAKqW,EAAU,CACjB,IAAItI,EAAU1R,EAAM,SAAS,IAAIlB,CAAG,EACpC+C,EAAU6P,EAAS,qBAAuB5S,CAAG,EACzC4S,EAAQ,QAAU,YACpB2E,GAAavX,CAAG,EAChBgR,GAAe,OAAOhR,CAAG,EACzBmb,EAAW,KAAKnb,CAAG,EAEvB,CAEF,OAAA+a,GAAiBI,CAAU,EACpBA,EAAW,OAAS,CAC7B,CACA,SAASC,GAAWpb,EAAK6B,EAAI,CAC3B,IAAIwZ,EAAUna,EAAM,SAAS,IAAIlB,CAAG,GAAKoO,GACzC,OAAIkD,GAAiB,IAAItR,CAAG,IAAM6B,GAChCyP,GAAiB,IAAItR,EAAK6B,CAAE,EAEvBwZ,CACT,CACA,SAAS/I,GAActS,EAAK,CAC1BkB,EAAM,SAAS,OAAOlB,CAAG,EACzBsR,GAAiB,OAAOtR,CAAG,CAC7B,CAEA,SAAS6R,GAAc7R,EAAKsb,EAAY,CACtC,IAAID,EAAUna,EAAM,SAAS,IAAIlB,CAAG,GAAKoO,GAGzCrL,EAAUsY,EAAQ,QAAU,aAAeC,EAAW,QAAU,WAAaD,EAAQ,QAAU,WAAaC,EAAW,QAAU,WAAaD,EAAQ,QAAU,WAAaC,EAAW,QAAU,cAAgBD,EAAQ,QAAU,WAAaC,EAAW,QAAU,aAAeD,EAAQ,QAAU,cAAgBC,EAAW,QAAU,YAAa,qCAAuCD,EAAQ,MAAQ,OAASC,EAAW,KAAK,EACza,IAAIxJ,EAAW,IAAI,IAAI5Q,EAAM,QAAQ,EACrC4Q,EAAS,IAAI9R,EAAKsb,CAAU,EAC5BvJ,GAAY,CACV,SAAAD,CACF,CAAC,CACH,CACA,SAASF,GAAsB2J,EAAO,CACpC,GAAI,CACF,gBAAAvH,EACA,aAAAtS,EACA,cAAAgQ,CACF,EAAI6J,EACJ,GAAIjK,GAAiB,OAAS,EAC5B,OAIEA,GAAiB,KAAO,GAC1BjQ,GAAQ,GAAO,8CAA8C,EAE/D,IAAIb,EAAU,MAAM,KAAK8Q,GAAiB,QAAQ,CAAC,EAC/C,CAACK,EAAY6J,CAAe,EAAIhb,EAAQA,EAAQ,OAAS,CAAC,EAC1D6a,EAAUna,EAAM,SAAS,IAAIyQ,CAAU,EAC3C,GAAI,EAAA0J,GAAWA,EAAQ,QAAU,eAO7BG,EAAgB,CAClB,gBAAAxH,EACA,aAAAtS,EACA,cAAAgQ,CACF,CAAC,EACC,OAAOC,CAEX,CACA,SAAS8C,GAAsBvS,EAAU,CACvC,IAAI8B,EAAQ2L,EAAuB,IAAK,CACtC,SAAAzN,CACF,CAAC,EACGmS,EAAcvF,GAAsBD,EACpC,CACF,QAAApJ,EACA,MAAAnB,CACF,EAAIsL,GAAuByE,CAAW,EAEtC,OAAA4C,GAAsB,EACf,CACL,gBAAiBxR,EACjB,MAAAnB,EACA,MAAAN,CACF,CACF,CACA,SAAS8R,GAAyB5T,EAAUyT,EAAgB,CAC1D,MAAO,CACL,WAAYb,GAAoBa,EAAe,cAAc,EAAE,MAAM,GACrE,MAAOhG,EAAuB,IAAK,CACjC,KAAM,kBACN,SAAAzN,EACA,QAASyT,EAAe,OAAS,MAAQ,YAAaA,EAAe,MAAQA,EAAe,MAAQ,OAAOA,EAAe,KAAK,CACjI,CAAC,CACH,CACF,CACA,SAASsB,GAAsBwE,EAAW,CACxC,IAAIC,EAAoB,CAAC,EACzB,OAAArK,GAAgB,QAAQ,CAACsK,EAAK1G,IAAY,EACpC,CAACwG,GAAaA,EAAUxG,CAAO,KAIjC0G,EAAI,OAAO,EACXD,EAAkB,KAAKzG,CAAO,EAC9B5D,GAAgB,OAAO4D,CAAO,EAElC,CAAC,EACMyG,CACT,CAGA,SAASE,GAAwBC,EAAWC,EAAaC,EAAQ,CAO/D,GANA1M,EAAuBwM,EACvBtM,EAAoBuM,EACpBxM,EAA0ByM,GAAU,KAIhC,CAACvM,GAAyBtO,EAAM,aAAegN,GAAiB,CAClEsB,EAAwB,GACxB,IAAIwM,EAAItI,GAAuBxS,EAAM,SAAUA,EAAM,OAAO,EACxD8a,GAAK,MACPjK,GAAY,CACV,sBAAuBiK,CACzB,CAAC,CAEL,CACA,MAAO,IAAM,CACX3M,EAAuB,KACvBE,EAAoB,KACpBD,EAA0B,IAC5B,CACF,CACA,SAAS2M,GAAa9a,EAAUsE,EAAS,CACvC,OAAI6J,GACQA,EAAwBnO,EAAUsE,EAAQ,IAAIsK,GAAKlK,GAA2BkK,EAAG7O,EAAM,UAAU,CAAC,CAAC,GAC/FC,EAAS,GAG3B,CACA,SAASiT,GAAmBjT,EAAUsE,EAAS,CAC7C,GAAI4J,GAAwBE,EAAmB,CAC7C,IAAIvP,EAAMic,GAAa9a,EAAUsE,CAAO,EACxC4J,EAAqBrP,CAAG,EAAIuP,EAAkB,CAChD,CACF,CACA,SAASmE,GAAuBvS,EAAUsE,EAAS,CACjD,GAAI4J,EAAsB,CACxB,IAAIrP,EAAMic,GAAa9a,EAAUsE,CAAO,EACpCuW,EAAI3M,EAAqBrP,CAAG,EAChC,GAAI,OAAOgc,GAAM,SACf,OAAOA,CAEX,CACA,OAAO,IACT,CACA,SAASnM,GAAcpK,EAAS4O,EAAanS,EAAU,CACrD,GAAI+M,EACF,GAAKxJ,EAME,CACL,IAAIyW,EAAYzW,EAAQA,EAAQ,OAAS,CAAC,EAAE,MAC5C,GAAIyW,EAAU,OAASA,EAAU,OAAS,KAAOA,EAAU,KAAK,SAAS,IAAI,GAK3E,MAAO,CACL,OAAQ,GACR,QAHmB/W,GAAgBkP,EAAanS,EAAUgD,EAAU,EAAI,CAI1E,CAEJ,KAhBE,OAAO,CACL,OAAQ,GACR,QAHeC,GAAgBkP,EAAanS,EAAUgD,EAAU,EAAI,GAG7C,CAAC,CAC1B,EAeJ,MAAO,CACL,OAAQ,GACR,QAAS,IACX,CACF,CACA,eAAe0Q,GAAenQ,EAASvD,EAAU4K,EAAQ,CACvD,IAAIqP,EAAiB1W,EACjBnB,EAAQ6X,EAAe,OAAS,EAAIA,EAAeA,EAAe,OAAS,CAAC,EAAE,MAAQ,KAC1F,OAAa,CACX,IAAIC,EAAWtN,GAAsB,KACjCuF,EAAcvF,GAAsBD,EACxC,GAAI,CACF,MAAMwN,GAAsBpN,EAAuB/M,EAAUia,EAAgB9H,EAAa1P,EAAUF,EAAoB8M,GAAoBzE,CAAM,CACpJ,OAASwN,EAAG,CACV,MAAO,CACL,KAAM,QACN,MAAOA,EACP,eAAA6B,CACF,CACF,QAAE,CAOIC,IACFvN,EAAa,CAAC,GAAGA,CAAU,EAE/B,CACA,GAAI/B,EAAO,QACT,MAAO,CACL,KAAM,SACR,EAEF,IAAIwP,EAAatX,GAAYqP,EAAanS,EAAUgD,CAAQ,EACxDqX,EAAe,GACnB,GAAID,EAAY,CACd,IAAIJ,EAAYI,EAAWA,EAAW,OAAS,CAAC,EAAE,MAClD,GAAIJ,EAAU,MAEZ,MAAO,CACL,KAAM,UACN,QAASI,CACX,EAEF,GAAIJ,EAAU,MAAQA,EAAU,KAAK,OAAS,EAC5C,GAAIA,EAAU,OAAS,IAIrBK,EAAe,OAGf,OAAO,CACL,KAAM,UACN,QAASD,CACX,CAGN,CACA,IAAIE,EAAoBrX,GAAgBkP,EAAanS,EAAUgD,EAAU,EAAI,EAI7E,GAAI,CAACsX,GAAqBL,EAAe,IAAIpM,GAAKA,EAAE,MAAM,EAAE,EAAE,KAAK,GAAG,IAAMyM,EAAkB,IAAIzM,GAAKA,EAAE,MAAM,EAAE,EAAE,KAAK,GAAG,EACzH,MAAO,CACL,KAAM,UACN,QAASwM,EAAeD,EAAa,IACvC,EAIF,GAFAH,EAAiBK,EACjBlY,EAAQ6X,EAAeA,EAAe,OAAS,CAAC,EAAE,MAC9C7X,EAAM,OAAS,IAEjB,MAAO,CACL,KAAM,UACN,QAAS6X,CACX,CAEJ,CACF,CACA,SAASM,GAAmBC,EAAW,CACrC/X,EAAW,CAAC,EACZmK,EAAqBvK,GAA0BmY,EAAWjY,EAAoB,OAAWE,CAAQ,CACnG,CACA,SAASgY,GAAY1H,EAAS2H,EAAU,CACtC,IAAIR,EAAWtN,GAAsB,KAErC+N,GAAgB5H,EAAS2H,EADP9N,GAAsBD,EACQlK,EAAUF,CAAkB,EAMxE2X,IACFvN,EAAa,CAAC,GAAGA,CAAU,EAC3BkD,GAAY,CAAC,CAAC,EAElB,CACA,OAAA7B,EAAS,CACP,IAAI,UAAW,CACb,OAAOhL,CACT,EACA,IAAI,QAAS,CACX,OAAOgK,CACT,EACA,IAAI,OAAQ,CACV,OAAOhO,CACT,EACA,IAAI,QAAS,CACX,OAAO2N,CACT,EACA,IAAI,QAAS,CACX,OAAOJ,CACT,EACA,WAAAgD,GACA,UAAAc,GACA,wBAAAqJ,GACA,SAAAjI,GACA,MAAA2E,GACA,WAAApE,GAGA,WAAYjT,GAAM6K,EAAK,QAAQ,WAAW7K,CAAE,EAC5C,eAAgBA,GAAM6K,EAAK,QAAQ,eAAe7K,CAAE,EACpD,WAAA0Z,GACA,cAAeC,GACf,QAAAxI,GACA,WAAAgJ,GACA,cAAA9I,GACA,YAAAqK,GACA,0BAA2B9L,EAC3B,yBAA0BQ,GAG1B,mBAAAoL,EACF,EACOvM,CACT,CAKA,MAAM4M,GAAyB,OAAO,UAAU,EAChD,SAASC,GAAoBvY,EAAQiO,EAAM,CACzC1P,EAAUyB,EAAO,OAAS,EAAG,kEAAkE,EAC/F,IAAIG,EAAW,CAAC,EACZO,GAAYuN,EAAOA,EAAK,SAAW,OAAS,IAC5ChO,EACJ,GAAIgO,GAAQ,MAAQA,EAAK,mBACvBhO,EAAqBgO,EAAK,2BACjBA,GAAQ,MAAQA,EAAK,oBAAqB,CAEnD,IAAI7D,EAAsB6D,EAAK,oBAC/BhO,EAAqBH,IAAU,CAC7B,iBAAkBsK,EAAoBtK,CAAK,CAC7C,EACF,MACEG,EAAqB6J,GAGvB,IAAIY,EAAStP,EAAS,CACpB,qBAAsB,GACtB,oBAAqB,EACvB,EAAG6S,EAAOA,EAAK,OAAS,IAAI,EACxB5D,EAAatK,GAA0BC,EAAQC,EAAoB,OAAWE,CAAQ,EA2B1F,eAAeqY,EAAMrI,EAASsI,EAAQ,CACpC,GAAI,CACF,eAAAC,EACA,wBAAAC,EACA,sBAAAC,CACF,EAAIH,IAAW,OAAS,CAAC,EAAIA,EACzBra,EAAM,IAAI,IAAI+R,EAAQ,GAAG,EACzB0I,EAAS1I,EAAQ,OACjBxT,EAAWC,GAAe,GAAIG,GAAWqB,CAAG,EAAG,KAAM,SAAS,EAC9D6C,EAAUT,GAAY6J,EAAY1N,EAAU+D,CAAQ,EAExD,GAAI,CAACoY,GAAcD,CAAM,GAAKA,IAAW,OAAQ,CAC/C,IAAIrZ,EAAQ2L,EAAuB,IAAK,CACtC,OAAA0N,CACF,CAAC,EACG,CACF,QAASE,EACT,MAAAjZ,CACF,EAAIsL,GAAuBf,CAAU,EACrC,MAAO,CACL,SAAA3J,EACA,SAAA/D,EACA,QAASoc,EACT,WAAY,CAAC,EACb,WAAY,KACZ,OAAQ,CACN,CAACjZ,EAAM,EAAE,EAAGN,CACd,EACA,WAAYA,EAAM,OAClB,cAAe,CAAC,EAChB,cAAe,CAAC,EAChB,gBAAiB,IACnB,CACF,SAAW,CAACyB,EAAS,CACnB,IAAIzB,EAAQ2L,EAAuB,IAAK,CACtC,SAAUxO,EAAS,QACrB,CAAC,EACG,CACF,QAASqT,EACT,MAAAlQ,CACF,EAAIsL,GAAuBf,CAAU,EACrC,MAAO,CACL,SAAA3J,EACA,SAAA/D,EACA,QAASqT,EACT,WAAY,CAAC,EACb,WAAY,KACZ,OAAQ,CACN,CAAClQ,EAAM,EAAE,EAAGN,CACd,EACA,WAAYA,EAAM,OAClB,cAAe,CAAC,EAChB,cAAe,CAAC,EAChB,gBAAiB,IACnB,CACF,CACA,IAAIiD,EAAS,MAAMuW,EAAU7I,EAASxT,EAAUsE,EAASyX,EAAgBE,GAAyB,KAAMD,IAA4B,GAAM,IAAI,EAC9I,OAAIM,GAAWxW,CAAM,EACZA,EAKFrH,EAAS,CACd,SAAAuB,EACA,SAAA+D,CACF,EAAG+B,CAAM,CACX,CA2BA,eAAeyW,EAAW/I,EAASgJ,EAAQ,CACzC,GAAI,CACF,QAAA1I,EACA,eAAAiI,EACA,sBAAAE,CACF,EAAIO,IAAW,OAAS,CAAC,EAAIA,EACzB/a,EAAM,IAAI,IAAI+R,EAAQ,GAAG,EACzB0I,EAAS1I,EAAQ,OACjBxT,EAAWC,GAAe,GAAIG,GAAWqB,CAAG,EAAG,KAAM,SAAS,EAC9D6C,EAAUT,GAAY6J,EAAY1N,EAAU+D,CAAQ,EAExD,GAAI,CAACoY,GAAcD,CAAM,GAAKA,IAAW,QAAUA,IAAW,UAC5D,MAAM1N,EAAuB,IAAK,CAChC,OAAA0N,CACF,CAAC,EACI,GAAI,CAAC5X,EACV,MAAMkK,EAAuB,IAAK,CAChC,SAAUxO,EAAS,QACrB,CAAC,EAEH,IAAI2E,EAAQmP,EAAUxP,EAAQ,KAAKsK,GAAKA,EAAE,MAAM,KAAOkF,CAAO,EAAIe,GAAevQ,EAAStE,CAAQ,EAClG,GAAI8T,GAAW,CAACnP,EACd,MAAM6J,EAAuB,IAAK,CAChC,SAAUxO,EAAS,SACnB,QAAA8T,CACF,CAAC,EACI,GAAI,CAACnP,EAEV,MAAM6J,EAAuB,IAAK,CAChC,SAAUxO,EAAS,QACrB,CAAC,EAEH,IAAI8F,EAAS,MAAMuW,EAAU7I,EAASxT,EAAUsE,EAASyX,EAAgBE,GAAyB,KAAM,GAAOtX,CAAK,EACpH,GAAI2X,GAAWxW,CAAM,EACnB,OAAOA,EAET,IAAIjD,EAAQiD,EAAO,OAAS,OAAO,OAAOA,EAAO,MAAM,EAAE,CAAC,EAAI,OAC9D,GAAIjD,IAAU,OAKZ,MAAMA,EAGR,GAAIiD,EAAO,WACT,OAAO,OAAO,OAAOA,EAAO,UAAU,EAAE,CAAC,EAE3C,GAAIA,EAAO,WAAY,CACrB,IAAI2W,EACJ,IAAI/R,EAAO,OAAO,OAAO5E,EAAO,UAAU,EAAE,CAAC,EAC7C,OAAK2W,EAAwB3W,EAAO,kBAAoB,MAAQ2W,EAAsB9X,EAAM,MAAM,EAAE,IAClG+F,EAAKiR,EAAsB,EAAI7V,EAAO,gBAAgBnB,EAAM,MAAM,EAAE,GAE/D+F,CACT,CAEF,CACA,eAAe2R,EAAU7I,EAASxT,EAAUsE,EAASyX,EAAgBE,EAAuBD,EAAyBU,EAAY,CAC/H9a,EAAU4R,EAAQ,OAAQ,sEAAsE,EAChG,GAAI,CACF,GAAIxB,GAAiBwB,EAAQ,OAAO,YAAY,CAAC,EAE/C,OADa,MAAMmJ,EAAOnJ,EAASlP,EAASoY,GAAc7H,GAAevQ,EAAStE,CAAQ,EAAG+b,EAAgBE,EAAuBD,EAAyBU,GAAc,IAAI,EAGjL,IAAI5W,EAAS,MAAM8W,EAAcpJ,EAASlP,EAASyX,EAAgBE,EAAuBD,EAAyBU,CAAU,EAC7H,OAAOJ,GAAWxW,CAAM,EAAIA,EAASrH,EAAS,CAAC,EAAGqH,EAAQ,CACxD,WAAY,KACZ,cAAe,CAAC,CAClB,CAAC,CACH,OAASqT,EAAG,CAIV,GAAI0D,GAAgB1D,CAAC,GAAKmD,GAAWnD,EAAE,MAAM,EAAG,CAC9C,GAAIA,EAAE,OAASnW,EAAW,MACxB,MAAMmW,EAAE,OAEV,OAAOA,EAAE,MACX,CAGA,GAAI2D,GAAmB3D,CAAC,EACtB,OAAOA,EAET,MAAMA,CACR,CACF,CACA,eAAewD,EAAOnJ,EAASlP,EAASsQ,EAAamH,EAAgBE,EAAuBD,EAAyBe,EAAgB,CACnI,IAAIjX,EACJ,GAAI,CAAC8O,EAAY,MAAM,QAAU,CAACA,EAAY,MAAM,KAAM,CACxD,IAAI/R,EAAQ2L,EAAuB,IAAK,CACtC,OAAQgF,EAAQ,OAChB,SAAU,IAAI,IAAIA,EAAQ,GAAG,EAAE,SAC/B,QAASoB,EAAY,MAAM,EAC7B,CAAC,EACD,GAAImI,EACF,MAAMla,EAERiD,EAAS,CACP,KAAM9C,EAAW,MACjB,MAAAH,CACF,CACF,MAEEiD,GADc,MAAMgP,EAAiB,SAAUtB,EAAS,CAACoB,CAAW,EAAGtQ,EAASyY,EAAgBhB,EAAgBE,CAAqB,GACpH,CAAC,EACdzI,EAAQ,OAAO,SACjBwJ,GAA+BxJ,EAASuJ,EAAgBhP,CAAM,EAGlE,GAAIgH,GAAiBjP,CAAM,EAKzB,MAAM,IAAI,SAAS,KAAM,CACvB,OAAQA,EAAO,SAAS,OACxB,QAAS,CACP,SAAUA,EAAO,SAAS,QAAQ,IAAI,UAAU,CAClD,CACF,CAAC,EAEH,GAAIoP,GAAiBpP,CAAM,EAAG,CAC5B,IAAIjD,EAAQ2L,EAAuB,IAAK,CACtC,KAAM,cACR,CAAC,EACD,GAAIuO,EACF,MAAMla,EAERiD,EAAS,CACP,KAAM9C,EAAW,MACjB,MAAAH,CACF,CACF,CACA,GAAIka,EAAgB,CAGlB,GAAIhJ,EAAcjO,CAAM,EACtB,MAAMA,EAAO,MAEf,MAAO,CACL,QAAS,CAAC8O,CAAW,EACrB,WAAY,CAAC,EACb,WAAY,CACV,CAACA,EAAY,MAAM,EAAE,EAAG9O,EAAO,IACjC,EACA,OAAQ,KAGR,WAAY,IACZ,cAAe,CAAC,EAChB,cAAe,CAAC,EAChB,gBAAiB,IACnB,CACF,CAEA,IAAImX,EAAgB,IAAI,QAAQzJ,EAAQ,IAAK,CAC3C,QAASA,EAAQ,QACjB,SAAUA,EAAQ,SAClB,OAAQA,EAAQ,MAClB,CAAC,EACD,GAAIO,EAAcjO,CAAM,EAAG,CAGzB,IAAIqP,EAAgB6G,EAA0BpH,EAAcjB,GAAoBrP,EAASsQ,EAAY,MAAM,EAAE,EACzGsI,EAAU,MAAMN,EAAcK,EAAe3Y,EAASyX,EAAgBE,EAAuBD,EAAyB,KAAM,CAAC7G,EAAc,MAAM,GAAIrP,CAAM,CAAC,EAEhK,OAAOrH,EAAS,CAAC,EAAGye,EAAS,CAC3B,WAAY1Q,GAAqB1G,EAAO,KAAK,EAAIA,EAAO,MAAM,OAASA,EAAO,YAAc,KAAOA,EAAO,WAAa,IACvH,WAAY,KACZ,cAAerH,EAAS,CAAC,EAAGqH,EAAO,QAAU,CAC3C,CAAC8O,EAAY,MAAM,EAAE,EAAG9O,EAAO,OACjC,EAAI,CAAC,CAAC,CACR,CAAC,CACH,CACA,IAAIoX,EAAU,MAAMN,EAAcK,EAAe3Y,EAASyX,EAAgBE,EAAuBD,EAAyB,IAAI,EAC9H,OAAOvd,EAAS,CAAC,EAAGye,EAAS,CAC3B,WAAY,CACV,CAACtI,EAAY,MAAM,EAAE,EAAG9O,EAAO,IACjC,CACF,EAAGA,EAAO,WAAa,CACrB,WAAYA,EAAO,UACrB,EAAI,CAAC,EAAG,CACN,cAAeA,EAAO,QAAU,CAC9B,CAAC8O,EAAY,MAAM,EAAE,EAAG9O,EAAO,OACjC,EAAI,CAAC,CACP,CAAC,CACH,CACA,eAAe8W,EAAcpJ,EAASlP,EAASyX,EAAgBE,EAAuBD,EAAyBU,EAAYhJ,EAAqB,CAC9I,IAAIqJ,EAAiBL,GAAc,KAEnC,GAAIK,GAAkB,EAAEL,GAAc,MAAQA,EAAW,MAAM,SAAW,EAAEA,GAAc,MAAQA,EAAW,MAAM,MACjH,MAAMlO,EAAuB,IAAK,CAChC,OAAQgF,EAAQ,OAChB,SAAU,IAAI,IAAIA,EAAQ,GAAG,EAAE,SAC/B,QAASkJ,GAAc,KAAO,OAASA,EAAW,MAAM,EAC1D,CAAC,EAGH,IAAI/G,GADiB+G,EAAa,CAACA,CAAU,EAAIhJ,GAAuBK,EAAcL,EAAoB,CAAC,CAAC,EAAIyJ,GAA8B7Y,EAASoP,EAAoB,CAAC,CAAC,EAAIpP,GAC9I,OAAOsK,GAAKA,EAAE,MAAM,QAAUA,EAAE,MAAM,IAAI,EAE7E,GAAI+G,EAAc,SAAW,EAC3B,MAAO,CACL,QAAArR,EAEA,WAAYA,EAAQ,OAAO,CAAC6G,EAAKyD,KAAM,OAAO,OAAOzD,EAAK,CACxD,CAACyD,GAAE,MAAM,EAAE,EAAG,IAChB,CAAC,EAAG,CAAC,CAAC,EACN,OAAQ8E,GAAuBK,EAAcL,EAAoB,CAAC,CAAC,EAAI,CACrE,CAACA,EAAoB,CAAC,CAAC,EAAGA,EAAoB,CAAC,EAAE,KACnD,EAAI,KACJ,WAAY,IACZ,cAAe,CAAC,EAChB,gBAAiB,IACnB,EAEF,IAAIoF,EAAU,MAAMhE,EAAiB,SAAUtB,EAASmC,EAAerR,EAASyY,EAAgBhB,EAAgBE,CAAqB,EACjIzI,EAAQ,OAAO,SACjBwJ,GAA+BxJ,EAASuJ,EAAgBhP,CAAM,EAGhE,IAAImC,EAAkB,IAAI,IACtBgN,EAAUE,GAAuB9Y,EAASqR,EAAemD,EAASpF,EAAqBxD,EAAiB8L,CAAuB,EAE/HqB,EAAkB,IAAI,IAAI1H,EAAc,IAAIhR,GAASA,EAAM,MAAM,EAAE,CAAC,EACxE,OAAAL,EAAQ,QAAQK,GAAS,CAClB0Y,EAAgB,IAAI1Y,EAAM,MAAM,EAAE,IACrCuY,EAAQ,WAAWvY,EAAM,MAAM,EAAE,EAAI,KAEzC,CAAC,EACMlG,EAAS,CAAC,EAAGye,EAAS,CAC3B,QAAA5Y,EACA,gBAAiB4L,EAAgB,KAAO,EAAI,OAAO,YAAYA,EAAgB,QAAQ,CAAC,EAAI,IAC9F,CAAC,CACH,CAGA,eAAe4E,EAAiB+D,EAAMrF,EAASmC,EAAerR,EAASyY,EAAgBhB,EAAgBE,EAAuB,CAC5H,IAAInD,EAAU,MAAMC,GAAqBkD,GAAyBpO,GAAqBgL,EAAMrF,EAASmC,EAAerR,EAASd,EAAUF,EAAoByY,CAAc,EAC1K,OAAO,MAAM,QAAQ,IAAIjD,EAAQ,IAAI,CAAChT,EAAQnH,IAAM,CAClD,GAAIqa,GAAwBlT,CAAM,EAAG,CACnC,IAAIqG,EAAWrG,EAAO,OAEtB,MAAMmT,GAAyC9M,EAAUqH,EAASmC,EAAchX,CAAC,EAAE,MAAM,GAAI2F,EAASP,EAAUgK,EAAO,oBAAoB,CAC7I,CACA,GAAIuO,GAAWxW,EAAO,MAAM,GAAKiX,EAG/B,MAAMjX,EAER,OAAOoT,GAAiCpT,CAAM,CAChD,CAAC,CAAC,CACJ,CACA,MAAO,CACL,WAAA4H,EACA,MAAAmO,EACA,WAAAU,CACF,CACF,CASA,SAASe,GAA0Bja,EAAQ6Z,EAASra,EAAO,CAOzD,OANiBpE,EAAS,CAAC,EAAGye,EAAS,CACrC,WAAY1Q,GAAqB3J,CAAK,EAAIA,EAAM,OAAS,IACzD,OAAQ,CACN,CAACqa,EAAQ,4BAA8B7Z,EAAO,CAAC,EAAE,EAAE,EAAGR,CACxD,CACF,CAAC,CAEH,CACA,SAASma,GAA+BxJ,EAASuJ,EAAgBhP,EAAQ,CACvE,GAAIA,EAAO,qBAAuByF,EAAQ,OAAO,SAAW,OAC1D,MAAMA,EAAQ,OAAO,OAEvB,IAAI0I,EAASa,EAAiB,aAAe,QAC7C,MAAM,IAAI,MAAMb,EAAS,oBAAsB1I,EAAQ,OAAS,IAAMA,EAAQ,GAAG,CACnF,CACA,SAAS+J,GAAuBjM,EAAM,CACpC,OAAOA,GAAQ,OAAS,aAAcA,GAAQA,EAAK,UAAY,MAAQ,SAAUA,GAAQA,EAAK,OAAS,OACzG,CACA,SAASoB,GAAY1S,EAAUsE,EAASP,EAAUyZ,EAAiB1d,EAAI2J,EAAsBgU,EAAaC,EAAU,CAClH,IAAIC,EACAC,EACJ,GAAIH,EAAa,CAGfE,EAAoB,CAAC,EACrB,QAAShZ,KAASL,EAEhB,GADAqZ,EAAkB,KAAKhZ,CAAK,EACxBA,EAAM,MAAM,KAAO8Y,EAAa,CAClCG,EAAmBjZ,EACnB,KACF,CAEJ,MACEgZ,EAAoBrZ,EACpBsZ,EAAmBtZ,EAAQA,EAAQ,OAAS,CAAC,EAG/C,IAAIjE,EAAOuJ,GAAU9J,GAAU,IAAK0J,GAAoBmU,EAAmBlU,CAAoB,EAAGvF,GAAclE,EAAS,SAAU+D,CAAQ,GAAK/D,EAAS,SAAU0d,IAAa,MAAM,EAItL,OAAI5d,GAAM,OACRO,EAAK,OAASL,EAAS,OACvBK,EAAK,KAAOL,EAAS,OAGlBF,GAAM,MAAQA,IAAO,IAAMA,IAAO,MAAQ8d,GAAoBA,EAAiB,MAAM,OAAS,CAACC,GAAmBxd,EAAK,MAAM,IAChIA,EAAK,OAASA,EAAK,OAASA,EAAK,OAAO,QAAQ,MAAO,SAAS,EAAI,UAMlEmd,GAAmBzZ,IAAa,MAClC1D,EAAK,SAAWA,EAAK,WAAa,IAAM0D,EAAWmB,GAAU,CAACnB,EAAU1D,EAAK,QAAQ,CAAC,GAEjFD,GAAWC,CAAI,CACxB,CAGA,SAASuS,GAAyBkL,EAAqBC,EAAW1d,EAAMiR,EAAM,CAE5E,GAAI,CAACA,GAAQ,CAACiM,GAAuBjM,CAAI,EACvC,MAAO,CACL,KAAAjR,CACF,EAEF,GAAIiR,EAAK,YAAc,CAAC6K,GAAc7K,EAAK,UAAU,EACnD,MAAO,CACL,KAAAjR,EACA,MAAOmO,EAAuB,IAAK,CACjC,OAAQ8C,EAAK,UACf,CAAC,CACH,EAEF,IAAI0M,EAAsB,KAAO,CAC/B,KAAA3d,EACA,MAAOmO,EAAuB,IAAK,CACjC,KAAM,cACR,CAAC,CACH,GAEIyP,EAAgB3M,EAAK,YAAc,MACnCoH,EAAaoF,EAAsBG,EAAc,YAAY,EAAIA,EAAc,YAAY,EAC3FtF,EAAauF,GAAkB7d,CAAI,EACvC,GAAIiR,EAAK,OAAS,QAChB,GAAIA,EAAK,cAAgB,aAAc,CAErC,GAAI,CAACU,GAAiB0G,CAAU,EAC9B,OAAOsF,EAAoB,EAE7B,IAAIG,EAAO,OAAO7M,EAAK,MAAS,SAAWA,EAAK,KAAOA,EAAK,gBAAgB,UAAYA,EAAK,gBAAgB,gBAE7G,MAAM,KAAKA,EAAK,KAAK,QAAQ,CAAC,EAAE,OAAO,CAACnG,EAAKiT,IAAU,CACrD,GAAI,CAACC,EAAMxc,CAAK,EAAIuc,EACpB,MAAO,GAAKjT,EAAMkT,EAAO,IAAMxc,EAAQ;AAAA,CACzC,EAAG,EAAE,EAAI,OAAOyP,EAAK,IAAI,EACzB,MAAO,CACL,KAAAjR,EACA,WAAY,CACV,WAAAqY,EACA,WAAAC,EACA,YAAarH,EAAK,YAClB,SAAU,OACV,KAAM,OACN,KAAA6M,CACF,CACF,CACF,SAAW7M,EAAK,cAAgB,mBAAoB,CAElD,GAAI,CAACU,GAAiB0G,CAAU,EAC9B,OAAOsF,EAAoB,EAE7B,GAAI,CACF,IAAIvT,EAAO,OAAO6G,EAAK,MAAS,SAAW,KAAK,MAAMA,EAAK,IAAI,EAAIA,EAAK,KACxE,MAAO,CACL,KAAAjR,EACA,WAAY,CACV,WAAAqY,EACA,WAAAC,EACA,YAAarH,EAAK,YAClB,SAAU,OACV,KAAA7G,EACA,KAAM,MACR,CACF,CACF,MAAY,CACV,OAAOuT,EAAoB,CAC7B,CACF,EAEFpc,EAAU,OAAO,UAAa,WAAY,+CAA+C,EACzF,IAAI0c,EACAC,EACJ,GAAIjN,EAAK,SACPgN,EAAeE,GAA8BlN,EAAK,QAAQ,EAC1DiN,EAAWjN,EAAK,iBACPA,EAAK,gBAAgB,SAC9BgN,EAAeE,GAA8BlN,EAAK,IAAI,EACtDiN,EAAWjN,EAAK,aACPA,EAAK,gBAAgB,gBAC9BgN,EAAehN,EAAK,KACpBiN,EAAWE,GAA8BH,CAAY,UAC5ChN,EAAK,MAAQ,KACtBgN,EAAe,IAAI,gBACnBC,EAAW,IAAI,aAEf,IAAI,CACFD,EAAe,IAAI,gBAAgBhN,EAAK,IAAI,EAC5CiN,EAAWE,GAA8BH,CAAY,CACvD,MAAY,CACV,OAAON,EAAoB,CAC7B,CAEF,IAAIrL,EAAa,CACf,WAAA+F,EACA,WAAAC,EACA,YAAarH,GAAQA,EAAK,aAAe,oCACzC,SAAAiN,EACA,KAAM,OACN,KAAM,MACR,EACA,GAAIvM,GAAiBW,EAAW,UAAU,EACxC,MAAO,CACL,KAAAtS,EACA,WAAAsS,CACF,EAGF,IAAIvQ,EAAa9B,GAAUD,CAAI,EAI/B,OAAI0d,GAAa3b,EAAW,QAAUyb,GAAmBzb,EAAW,MAAM,GACxEkc,EAAa,OAAO,QAAS,EAAE,EAEjClc,EAAW,OAAS,IAAMkc,EACnB,CACL,KAAMle,GAAWgC,CAAU,EAC3B,WAAAuQ,CACF,CACF,CAGA,SAASwK,GAA8B7Y,EAASoQ,EAAY,CAC1D,IAAIgK,EAAkBpa,EACtB,GAAIoQ,EAAY,CACd,IAAInV,EAAQ+E,EAAQ,UAAUsK,GAAKA,EAAE,MAAM,KAAO8F,CAAU,EACxDnV,GAAS,IACXmf,EAAkBpa,EAAQ,MAAM,EAAG/E,CAAK,EAE5C,CACA,OAAOmf,CACT,CACA,SAAS7I,GAAiBnT,EAAS3C,EAAOuE,EAASqO,EAAY3S,EAAU2e,EAAeC,EAA6BrP,EAAwBC,EAAyBC,EAAuBQ,EAAiBF,EAAkBD,EAAkBoD,EAAanP,EAAU2P,EAAqB,CAC5R,IAAIE,EAAeF,EAAsBK,EAAcL,EAAoB,CAAC,CAAC,EAAIA,EAAoB,CAAC,EAAE,MAAQA,EAAoB,CAAC,EAAE,KAAO,OAC1ImL,EAAanc,EAAQ,UAAU3C,EAAM,QAAQ,EAC7C+e,EAAUpc,EAAQ,UAAU1C,CAAQ,EAEpC0U,EAAahB,GAAuBK,EAAcL,EAAoB,CAAC,CAAC,EAAIA,EAAoB,CAAC,EAAI,OACrGgL,EAAkBhK,EAAayI,GAA8B7Y,EAASoQ,CAAU,EAAIpQ,EAIpFya,EAAerL,EAAsBA,EAAoB,CAAC,EAAE,WAAa,OACzEsL,EAAyBJ,GAA+BG,GAAgBA,GAAgB,IACxFE,EAAoBP,EAAgB,OAAO,CAAC/Z,EAAOpF,IAAU,CAC/D,GAAI,CACF,MAAA4D,CACF,EAAIwB,EACJ,GAAIxB,EAAM,KAER,MAAO,GAET,GAAIA,EAAM,QAAU,KAClB,MAAO,GAET,GAAIwb,EACF,OAAI,OAAOxb,EAAM,QAAW,YAAcA,EAAM,OAAO,QAC9C,GAEFpD,EAAM,WAAWoD,EAAM,EAAE,IAAM,SAEtC,CAACpD,EAAM,QAAUA,EAAM,OAAOoD,EAAM,EAAE,IAAM,QAG9C,GAAI+b,GAAYnf,EAAM,WAAYA,EAAM,QAAQR,CAAK,EAAGoF,CAAK,GAAK6K,EAAwB,KAAK9L,IAAMA,KAAOiB,EAAM,MAAM,EAAE,EACxH,MAAO,GAMT,IAAIwa,GAAoBpf,EAAM,QAAQR,CAAK,EACvC6f,GAAiBza,EACrB,OAAO0a,GAAuB1a,EAAOlG,EAAS,CAC5C,WAAAogB,EACA,cAAeM,GAAkB,OACjC,QAAAL,EACA,WAAYM,GAAe,MAC7B,EAAGzM,EAAY,CACb,aAAAiB,EACA,aAAAmL,EACA,wBAAyBC,EAAyB,GAElDzP,GAA0BsP,EAAW,SAAWA,EAAW,SAAWC,EAAQ,SAAWA,EAAQ,QAEjGD,EAAW,SAAWC,EAAQ,QAAUQ,GAAmBH,GAAmBC,EAAc,CAC9F,CAAC,CAAC,CACJ,CAAC,EAEGxJ,EAAuB,CAAC,EAC5B,OAAA7F,EAAiB,QAAQ,CAACuG,EAAGzX,IAAQ,CAMnC,GAAI8f,GAAiB,CAACra,EAAQ,KAAKsK,IAAKA,GAAE,MAAM,KAAO0H,EAAE,OAAO,GAAKrG,EAAgB,IAAIpR,CAAG,EAC1F,OAEF,IAAI0gB,EAAiB1b,GAAYqP,EAAaoD,EAAE,KAAMvS,CAAQ,EAK9D,GAAI,CAACwb,EAAgB,CACnB3J,EAAqB,KAAK,CACxB,IAAA/W,EACA,QAASyX,EAAE,QACX,KAAMA,EAAE,KACR,QAAS,KACT,MAAO,KACP,WAAY,IACd,CAAC,EACD,MACF,CAIA,IAAI7E,GAAU1R,EAAM,SAAS,IAAIlB,CAAG,EAChC2gB,GAAe3K,GAAe0K,EAAgBjJ,EAAE,IAAI,EACpDmJ,GAAmB,GACnB3P,EAAiB,IAAIjR,CAAG,EAE1B4gB,GAAmB,GACVhQ,EAAsB,SAAS5Q,CAAG,EAE3C4gB,GAAmB,GACVhO,IAAWA,GAAQ,QAAU,QAAUA,GAAQ,OAAS,OAIjEgO,GAAmBlQ,EAInBkQ,GAAmBJ,GAAuBG,GAAc/gB,EAAS,CAC/D,WAAAogB,EACA,cAAe9e,EAAM,QAAQA,EAAM,QAAQ,OAAS,CAAC,EAAE,OACvD,QAAA+e,EACA,WAAYxa,EAAQA,EAAQ,OAAS,CAAC,EAAE,MAC1C,EAAGqO,EAAY,CACb,aAAAiB,EACA,aAAAmL,EACA,wBAAyBC,EAAyB,GAAQzP,CAC5D,CAAC,CAAC,EAEAkQ,IACF7J,EAAqB,KAAK,CACxB,IAAA/W,EACA,QAASyX,EAAE,QACX,KAAMA,EAAE,KACR,QAASiJ,EACT,MAAOC,GACP,WAAY,IAAI,eAClB,CAAC,CAEL,CAAC,EACM,CAACP,EAAmBrJ,CAAoB,CACjD,CACA,SAASsJ,GAAYQ,EAAmBC,EAAchb,EAAO,CAC3D,IAAIib,EAEJ,CAACD,GAEDhb,EAAM,MAAM,KAAOgb,EAAa,MAAM,GAGlCE,EAAgBH,EAAkB/a,EAAM,MAAM,EAAE,IAAM,OAE1D,OAAOib,GAASC,CAClB,CACA,SAASP,GAAmBK,EAAchb,EAAO,CAC/C,IAAImb,EAAcH,EAAa,MAAM,KACrC,OAEEA,EAAa,WAAahb,EAAM,UAGhCmb,GAAe,MAAQA,EAAY,SAAS,GAAG,GAAKH,EAAa,OAAO,GAAG,IAAMhb,EAAM,OAAO,GAAG,CAErG,CACA,SAAS0a,GAAuBU,EAAaC,EAAK,CAChD,GAAID,EAAY,MAAM,iBAAkB,CACtC,IAAIE,EAAcF,EAAY,MAAM,iBAAiBC,CAAG,EACxD,GAAI,OAAOC,GAAgB,UACzB,OAAOA,CAEX,CACA,OAAOD,EAAI,uBACb,CAKA,eAAe9E,GAAsBpN,EAAuBzN,EAAMiE,EAASjB,EAAQG,EAAUF,EAAoB4c,EAAsBvU,EAAQ,CAC7I,IAAI9M,EAAM,CAACwB,EAAM,GAAGiE,EAAQ,IAAIsK,GAAKA,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,GAAG,EAC1D,GAAI,CACF,IAAIuR,EAAUD,EAAqB,IAAIrhB,CAAG,EACrCshB,IACHA,EAAUrS,EAAsB,CAC9B,KAAAzN,EACA,QAAAiE,EACA,MAAO,CAACwP,EAAS2H,IAAa,CACvB9P,EAAO,SACV+P,GAAgB5H,EAAS2H,EAAUpY,EAAQG,EAAUF,CAAkB,CAE3E,CACF,CAAC,EACD4c,EAAqB,IAAIrhB,EAAKshB,CAAO,GAEnCA,GAAWC,GAAUD,CAAO,GAC9B,MAAMA,CAEV,QAAE,CACAD,EAAqB,OAAOrhB,CAAG,CACjC,CACF,CACA,SAAS6c,GAAgB5H,EAAS2H,EAAUvI,EAAa1P,EAAUF,EAAoB,CACrF,GAAIwQ,EAAS,CACX,IAAIuM,EACJ,IAAIld,EAAQK,EAASsQ,CAAO,EAC5BlS,EAAUuB,EAAO,oDAAsD2Q,CAAO,EAC9E,IAAIwM,EAAeld,GAA0BqY,EAAUnY,EAAoB,CAACwQ,EAAS,QAAS,SAASuM,EAAkBld,EAAM,WAAa,KAAO,OAASkd,EAAgB,SAAW,GAAG,CAAC,EAAG7c,CAAQ,EAClML,EAAM,SACRA,EAAM,SAAS,KAAK,GAAGmd,CAAY,EAEnCnd,EAAM,SAAWmd,CAErB,KAAO,CACL,IAAIA,EAAeld,GAA0BqY,EAAUnY,EAAoB,CAAC,QAAS,OAAO4P,EAAY,QAAU,GAAG,CAAC,EAAG1P,CAAQ,EACjI0P,EAAY,KAAK,GAAGoN,CAAY,CAClC,CACF,CAMA,eAAeC,GAAoBpd,EAAOG,EAAoBE,EAAU,CACtE,GAAI,CAACL,EAAM,KACT,OAEF,IAAIqd,EAAY,MAAMrd,EAAM,KAAK,EAIjC,GAAI,CAACA,EAAM,KACT,OAEF,IAAIsd,EAAgBjd,EAASL,EAAM,EAAE,EACrCvB,EAAU6e,EAAe,4BAA4B,EASrD,IAAIC,EAAe,CAAC,EACpB,QAASC,KAAqBH,EAAW,CAEvC,IAAII,EADmBH,EAAcE,CAAiB,IACC,QAGvDA,IAAsB,mBACtBzgB,GAAQ,CAAC0gB,EAA6B,UAAaH,EAAc,GAAK,4BAAgCE,EAAoB,iFAAyF,4BAA+BA,EAAoB,qBAAsB,EACxR,CAACC,GAA+B,CAAC3d,GAAmB,IAAI0d,CAAiB,IAC3ED,EAAaC,CAAiB,EAAIH,EAAUG,CAAiB,EAEjE,CAGA,OAAO,OAAOF,EAAeC,CAAY,EAIzC,OAAO,OAAOD,EAAehiB,EAAS,CAAC,EAAG6E,EAAmBmd,CAAa,EAAG,CAC3E,KAAM,MACR,CAAC,CAAC,CACJ,CAEA,SAAS5S,GAAoByD,EAAM,CACjC,OAAO,QAAQ,IAAIA,EAAK,QAAQ,IAAI1C,GAAKA,EAAE,QAAQ,CAAC,CAAC,CACvD,CACA,eAAemK,GAAqBnL,EAAkBiL,EAAMrF,EAASmC,EAAerR,EAASd,EAAUF,EAAoByY,EAAgB,CACzI,IAAI8E,EAAiBlL,EAAc,OAAO,CAACxK,EAAKyD,IAAMzD,EAAI,IAAIyD,EAAE,MAAM,EAAE,EAAG,IAAI,GAAK,EAChFkS,EAAgB,IAAI,IAIpBhI,EAAU,MAAMlL,EAAiB,CACnC,QAAStJ,EAAQ,IAAIK,GAAS,CAC5B,IAAIoc,EAAaF,EAAe,IAAIlc,EAAM,MAAM,EAAE,EAYlD,OAAOlG,EAAS,CAAC,EAAGkG,EAAO,CACzB,WAAAoc,EACA,QATYC,IACZF,EAAc,IAAInc,EAAM,MAAM,EAAE,EACzBoc,EAAaE,GAAmBpI,EAAMrF,EAAS7O,EAAOnB,EAAUF,EAAoB0d,EAAiBjF,CAAc,EAAI,QAAQ,QAAQ,CAC5I,KAAM/Y,EAAW,KACjB,OAAQ,MACV,CAAC,EAKH,CAAC,CACH,CAAC,EACD,QAAAwQ,EACA,OAAQlP,EAAQ,CAAC,EAAE,OACnB,QAASyX,CACX,CAAC,EAGD,OAAAzX,EAAQ,QAAQsK,GAAKhN,EAAUkf,EAAc,IAAIlS,EAAE,MAAM,EAAE,EAAG,kDAAqDA,EAAE,MAAM,GAAK,sHAAiI,CAAC,EAE3PkK,EAAQ,OAAO,CAACrQ,EAAG9J,IAAMkiB,EAAe,IAAIvc,EAAQ3F,CAAC,EAAE,MAAM,EAAE,CAAC,CACzE,CAEA,eAAesiB,GAAmBpI,EAAMrF,EAAS7O,EAAOnB,EAAUF,EAAoB0d,EAAiBE,EAAe,CACpH,IAAIpb,EACAqb,EACAC,EAAaC,GAAW,CAE1B,IAAIrW,EAGAsW,EAAe,IAAI,QAAQ,CAAC7Y,EAAGwC,IAAMD,EAASC,CAAC,EACnDkW,EAAW,IAAMnW,EAAO,EACxBwI,EAAQ,OAAO,iBAAiB,QAAS2N,CAAQ,EACjD,IAAII,EAAgBC,GACd,OAAOH,GAAY,WACd,QAAQ,OAAO,IAAI,MAAM,oEAAsE,IAAOxI,EAAO,eAAkBlU,EAAM,MAAM,GAAK,IAAI,CAAC,EAEvJ0c,EAAQ,CACb,QAAA7N,EACA,OAAQ7O,EAAM,OACd,QAASuc,CACX,EAAG,GAAIM,IAAQ,OAAY,CAACA,CAAG,EAAI,CAAC,CAAE,EAEpCC,EACJ,OAAIT,EACFS,EAAiBT,EAAgBQ,GAAOD,EAAcC,CAAG,CAAC,EAE1DC,GAAkB,SAAY,CAC5B,GAAI,CAEF,MAAO,CACL,KAAM,OACN,OAHQ,MAAMF,EAAc,CAI9B,CACF,OAASpI,EAAG,CACV,MAAO,CACL,KAAM,QACN,OAAQA,CACV,CACF,CACF,GAAG,EAEE,QAAQ,KAAK,CAACsI,EAAgBH,CAAY,CAAC,CACpD,EACA,GAAI,CACF,IAAID,EAAU1c,EAAM,MAAMkU,CAAI,EAC9B,GAAIlU,EAAM,MAAM,KACd,GAAI0c,EAAS,CAEX,IAAIK,EACA,CAAC7f,CAAK,EAAI,MAAM,QAAQ,IAAI,CAIhCuf,EAAWC,CAAO,EAAE,MAAMlI,GAAK,CAC7BuI,EAAevI,CACjB,CAAC,EAAGoH,GAAoB5b,EAAM,MAAOrB,EAAoBE,CAAQ,CAAC,CAAC,EACnE,GAAIke,IAAiB,OACnB,MAAMA,EAER5b,EAASjE,CACX,SAEE,MAAM0e,GAAoB5b,EAAM,MAAOrB,EAAoBE,CAAQ,EACnE6d,EAAU1c,EAAM,MAAMkU,CAAI,EACtBwI,EAIFvb,EAAS,MAAMsb,EAAWC,CAAO,UACxBxI,IAAS,SAAU,CAC5B,IAAIpX,EAAM,IAAI,IAAI+R,EAAQ,GAAG,EACzBzS,EAAWU,EAAI,SAAWA,EAAI,OAClC,MAAM+M,EAAuB,IAAK,CAChC,OAAQgF,EAAQ,OAChB,SAAAzS,EACA,QAAS4D,EAAM,MAAM,EACvB,CAAC,CACH,KAGE,OAAO,CACL,KAAM3B,EAAW,KACjB,OAAQ,MACV,UAGMqe,EAOVvb,EAAS,MAAMsb,EAAWC,CAAO,MAPd,CACnB,IAAI5f,EAAM,IAAI,IAAI+R,EAAQ,GAAG,EACzBzS,EAAWU,EAAI,SAAWA,EAAI,OAClC,MAAM+M,EAAuB,IAAK,CAChC,SAAAzN,CACF,CAAC,CACH,CAGAa,EAAUkE,EAAO,SAAW,OAAW,gBAAkB+S,IAAS,SAAW,YAAc,YAAc,eAAiB,IAAOlU,EAAM,MAAM,GAAK,4CAA8CkU,EAAO,MAAQ,4CAA4C,CAC7P,OAASM,EAAG,CAIV,MAAO,CACL,KAAMnW,EAAW,MACjB,OAAQmW,CACV,CACF,QAAE,CACIgI,GACF3N,EAAQ,OAAO,oBAAoB,QAAS2N,CAAQ,CAExD,CACA,OAAOrb,CACT,CACA,eAAeoT,GAAiCyI,EAAe,CAC7D,GAAI,CACF,OAAA7b,EACA,KAAA+S,EACA,OAAAxM,CACF,EAAIsV,EACJ,GAAIrF,GAAWxW,CAAM,EAAG,CACtB,IAAI4E,EACJ,GAAI,CACF,IAAIkX,EAAc9b,EAAO,QAAQ,IAAI,cAAc,EAG/C8b,GAAe,wBAAwB,KAAKA,CAAW,EACrD9b,EAAO,MAAQ,KACjB4E,EAAO,KAEPA,EAAO,MAAM5E,EAAO,KAAK,EAG3B4E,EAAO,MAAM5E,EAAO,KAAK,CAE7B,OAASqT,EAAG,CACV,MAAO,CACL,KAAMnW,EAAW,MACjB,MAAOmW,CACT,CACF,CACA,OAAIN,IAAS7V,EAAW,MACf,CACL,KAAMA,EAAW,MACjB,MAAO,IAAIoJ,GAAkBtG,EAAO,OAAQA,EAAO,WAAY4E,CAAI,EACnE,WAAY5E,EAAO,OACnB,QAASA,EAAO,OAClB,EAEK,CACL,KAAM9C,EAAW,KACjB,KAAA0H,EACA,WAAY5E,EAAO,OACnB,QAASA,EAAO,OAClB,CACF,CACA,GAAI+S,IAAS7V,EAAW,MACtB,MAAO,CACL,KAAMA,EAAW,MACjB,MAAO8C,EACP,WAAY0G,GAAqB1G,CAAM,EAAIA,EAAO,OAASuG,CAC7D,EAEF,GAAIwV,GAAe/b,CAAM,EAAG,CAC1B,IAAIgc,EAAcC,EAClB,MAAO,CACL,KAAM/e,EAAW,SACjB,aAAc8C,EACd,YAAagc,EAAehc,EAAO,OAAS,KAAO,OAASgc,EAAa,OACzE,UAAWC,EAAgBjc,EAAO,OAAS,KAAO,OAASic,EAAc,UAAY,IAAI,QAAQjc,EAAO,KAAK,OAAO,CACtH,CACF,CACA,MAAO,CACL,KAAM9C,EAAW,KACjB,KAAM8C,EACN,WAAYuG,CACd,CACF,CAEA,SAAS4M,GAAyC9M,EAAUqH,EAASM,EAASxP,EAASP,EAAU0F,EAAsB,CACrH,IAAIzJ,EAAWmM,EAAS,QAAQ,IAAI,UAAU,EAE9C,GADAvK,EAAU5B,EAAU,4EAA4E,EAC5F,CAACkN,GAAmB,KAAKlN,CAAQ,EAAG,CACtC,IAAIgiB,EAAiB1d,EAAQ,MAAM,EAAGA,EAAQ,UAAUsK,GAAKA,EAAE,MAAM,KAAOkF,CAAO,EAAI,CAAC,EACxF9T,EAAW0S,GAAY,IAAI,IAAIc,EAAQ,GAAG,EAAGwO,EAAgBje,EAAU,GAAM/D,EAAUyJ,CAAoB,EAC3G0C,EAAS,QAAQ,IAAI,WAAYnM,CAAQ,CAC3C,CACA,OAAOmM,CACT,CACA,SAAS6I,GAA0BhV,EAAU6e,EAAY9a,EAAU,CACjE,GAAImJ,GAAmB,KAAKlN,CAAQ,EAAG,CAErC,IAAIiiB,EAAqBjiB,EACrByB,EAAMwgB,EAAmB,WAAW,IAAI,EAAI,IAAI,IAAIpD,EAAW,SAAWoD,CAAkB,EAAI,IAAI,IAAIA,CAAkB,EAC1HC,EAAiBhe,GAAczC,EAAI,SAAUsC,CAAQ,GAAK,KAC9D,GAAItC,EAAI,SAAWod,EAAW,QAAUqD,EACtC,OAAOzgB,EAAI,SAAWA,EAAI,OAASA,EAAI,IAE3C,CACA,OAAOzB,CACT,CAIA,SAASyT,GAAwB/Q,EAAS1C,EAAU2L,EAAQgH,EAAY,CACtE,IAAIlR,EAAMiB,EAAQ,UAAUwb,GAAkBle,CAAQ,CAAC,EAAE,SAAS,EAC9D2K,EAAO,CACT,OAAAgB,CACF,EACA,GAAIgH,GAAcX,GAAiBW,EAAW,UAAU,EAAG,CACzD,GAAI,CACF,WAAA+F,EACA,YAAAE,CACF,EAAIjG,EAIJhI,EAAK,OAAS+N,EAAW,YAAY,EACjCE,IAAgB,oBAClBjO,EAAK,QAAU,IAAI,QAAQ,CACzB,eAAgBiO,CAClB,CAAC,EACDjO,EAAK,KAAO,KAAK,UAAUgI,EAAW,IAAI,GACjCiG,IAAgB,aAEzBjO,EAAK,KAAOgI,EAAW,KACdiG,IAAgB,qCAAuCjG,EAAW,SAE3EhI,EAAK,KAAO6T,GAA8B7L,EAAW,QAAQ,EAG7DhI,EAAK,KAAOgI,EAAW,QAE3B,CACA,OAAO,IAAI,QAAQlR,EAAKkJ,CAAI,CAC9B,CACA,SAAS6T,GAA8BD,EAAU,CAC/C,IAAID,EAAe,IAAI,gBACvB,OAAS,CAACzf,EAAKgD,CAAK,IAAK0c,EAAS,QAAQ,EAExCD,EAAa,OAAOzf,EAAK,OAAOgD,GAAU,SAAWA,EAAQA,EAAM,IAAI,EAEzE,OAAOyc,CACT,CACA,SAASG,GAA8BH,EAAc,CACnD,IAAIC,EAAW,IAAI,SACnB,OAAS,CAAC1f,EAAKgD,CAAK,IAAKyc,EAAa,QAAQ,EAC5CC,EAAS,OAAO1f,EAAKgD,CAAK,EAE5B,OAAO0c,CACT,CACA,SAASnB,GAAuB9Y,EAASqR,EAAemD,EAASpF,EAAqBxD,EAAiB8L,EAAyB,CAE9H,IAAIpX,EAAa,CAAC,EACdiK,EAAS,KACTsT,EACAC,EAAa,GACbC,EAAgB,CAAC,EACjBC,EAAe5O,GAAuBK,EAAcL,EAAoB,CAAC,CAAC,EAAIA,EAAoB,CAAC,EAAE,MAAQ,OAEjH,OAAAoF,EAAQ,QAAQ,CAAChT,EAAQvG,IAAU,CACjC,IAAImE,EAAKiS,EAAcpW,CAAK,EAAE,MAAM,GAEpC,GADAqC,EAAU,CAACmT,GAAiBjP,CAAM,EAAG,qDAAqD,EACtFiO,EAAcjO,CAAM,EAAG,CACzB,IAAIjD,EAAQiD,EAAO,MASnB,GALIwc,IAAiB,SACnBzf,EAAQyf,EACRA,EAAe,QAEjBzT,EAASA,GAAU,CAAC,EAChBmN,EACFnN,EAAOnL,CAAE,EAAIb,MACR,CAIL,IAAIsS,EAAgBxB,GAAoBrP,EAASZ,CAAE,EAC/CmL,EAAOsG,EAAc,MAAM,EAAE,GAAK,OACpCtG,EAAOsG,EAAc,MAAM,EAAE,EAAItS,EAErC,CAEA+B,EAAWlB,CAAE,EAAI,OAGZ0e,IACHA,EAAa,GACbD,EAAa3V,GAAqB1G,EAAO,KAAK,EAAIA,EAAO,MAAM,OAAS,KAEtEA,EAAO,UACTuc,EAAc3e,CAAE,EAAIoC,EAAO,QAE/B,MACMoP,GAAiBpP,CAAM,GACzBoK,EAAgB,IAAIxM,EAAIoC,EAAO,YAAY,EAC3ClB,EAAWlB,CAAE,EAAIoC,EAAO,aAAa,KAGjCA,EAAO,YAAc,MAAQA,EAAO,aAAe,KAAO,CAACsc,IAC7DD,EAAarc,EAAO,YAElBA,EAAO,UACTuc,EAAc3e,CAAE,EAAIoC,EAAO,WAG7BlB,EAAWlB,CAAE,EAAIoC,EAAO,KAGpBA,EAAO,YAAcA,EAAO,aAAe,KAAO,CAACsc,IACrDD,EAAarc,EAAO,YAElBA,EAAO,UACTuc,EAAc3e,CAAE,EAAIoC,EAAO,SAInC,CAAC,EAIGwc,IAAiB,QAAa5O,IAChC7E,EAAS,CACP,CAAC6E,EAAoB,CAAC,CAAC,EAAG4O,CAC5B,EACA1d,EAAW8O,EAAoB,CAAC,CAAC,EAAI,QAEhC,CACL,WAAA9O,EACA,OAAAiK,EACA,WAAYsT,GAAc,IAC1B,cAAAE,CACF,CACF,CACA,SAASzL,GAAkB7W,EAAOuE,EAASqR,EAAemD,EAASpF,EAAqBkC,EAAsBY,EAAgBtG,EAAiB,CAC7I,GAAI,CACF,WAAAtL,EACA,OAAAiK,CACF,EAAIuO,GAAuB9Y,EAASqR,EAAemD,EAASpF,EAAqBxD,EAAiB,EAClG,EAEA,QAAS3Q,EAAQ,EAAGA,EAAQqW,EAAqB,OAAQrW,IAAS,CAChE,GAAI,CACF,IAAAV,EACA,MAAA8F,EACA,WAAAgV,CACF,EAAI/D,EAAqBrW,CAAK,EAC9BqC,EAAU4U,IAAmB,QAAaA,EAAejX,CAAK,IAAM,OAAW,2CAA2C,EAC1H,IAAIuG,EAAS0Q,EAAejX,CAAK,EAEjC,GAAI,EAAAoa,GAAcA,EAAW,OAAO,SAG7B,GAAI5F,EAAcjO,CAAM,EAAG,CAChC,IAAIqP,EAAgBxB,GAAoB5T,EAAM,QAAS4E,GAAS,KAAO,OAASA,EAAM,MAAM,EAAE,EACxFkK,GAAUA,EAAOsG,EAAc,MAAM,EAAE,IAC3CtG,EAASpQ,EAAS,CAAC,EAAGoQ,EAAQ,CAC5B,CAACsG,EAAc,MAAM,EAAE,EAAGrP,EAAO,KACnC,CAAC,GAEH/F,EAAM,SAAS,OAAOlB,CAAG,CAC3B,SAAWkW,GAAiBjP,CAAM,EAGhClE,EAAU,GAAO,yCAAyC,UACjDsT,GAAiBpP,CAAM,EAGhClE,EAAU,GAAO,iCAAiC,MAC7C,CACL,IAAIwW,EAAcL,GAAejS,EAAO,IAAI,EAC5C/F,EAAM,SAAS,IAAIlB,EAAKuZ,CAAW,CACrC,CACF,CACA,MAAO,CACL,WAAAxT,EACA,OAAAiK,CACF,CACF,CACA,SAASqD,GAAgBtN,EAAY2d,EAAeje,EAASuK,EAAQ,CACnE,IAAI2T,EAAmB/jB,EAAS,CAAC,EAAG8jB,CAAa,EACjD,QAAS5d,KAASL,EAAS,CACzB,IAAIZ,EAAKiB,EAAM,MAAM,GAUrB,GATI4d,EAAc,eAAe7e,CAAE,EAC7B6e,EAAc7e,CAAE,IAAM,SACxB8e,EAAiB9e,CAAE,EAAI6e,EAAc7e,CAAE,GAEhCkB,EAAWlB,CAAE,IAAM,QAAaiB,EAAM,MAAM,SAGrD6d,EAAiB9e,CAAE,EAAIkB,EAAWlB,CAAE,GAElCmL,GAAUA,EAAO,eAAenL,CAAE,EAEpC,KAEJ,CACA,OAAO8e,CACT,CACA,SAASpO,GAAuBV,EAAqB,CACnD,OAAKA,EAGEK,EAAcL,EAAoB,CAAC,CAAC,EAAI,CAE7C,WAAY,CAAC,CACf,EAAI,CACF,WAAY,CACV,CAACA,EAAoB,CAAC,CAAC,EAAGA,EAAoB,CAAC,EAAE,IACnD,CACF,EATS,CAAC,CAUZ,CAIA,SAASC,GAAoBrP,EAASwP,EAAS,CAE7C,OADsBA,EAAUxP,EAAQ,MAAM,EAAGA,EAAQ,UAAUsK,GAAKA,EAAE,MAAM,KAAOkF,CAAO,EAAI,CAAC,EAAI,CAAC,GAAGxP,CAAO,GAC3F,QAAQ,EAAE,KAAKsK,GAAKA,EAAE,MAAM,mBAAqB,EAAI,GAAKtK,EAAQ,CAAC,CAC5F,CACA,SAASmK,GAAuBpL,EAAQ,CAEtC,IAAIF,EAAQE,EAAO,SAAW,EAAIA,EAAO,CAAC,EAAIA,EAAO,KAAK,GAAK,EAAE,OAAS,CAAC,EAAE,MAAQ,EAAE,OAAS,GAAG,GAAK,CACtG,GAAI,sBACN,EACA,MAAO,CACL,QAAS,CAAC,CACR,OAAQ,CAAC,EACT,SAAU,GACV,aAAc,GACd,MAAAF,CACF,CAAC,EACD,MAAAA,CACF,CACF,CACA,SAASqL,EAAuBnC,EAAQoW,EAAQ,CAC9C,GAAI,CACF,SAAA1hB,EACA,QAAA+S,EACA,OAAAoI,EACA,KAAArD,EACA,QAAA/W,CACF,EAAI2gB,IAAW,OAAS,CAAC,EAAIA,EACzBnW,EAAa,uBACboW,EAAe,kCACnB,OAAIrW,IAAW,KACbC,EAAa,cACTuM,IAAS,kBACX6J,EAAe,wBAA2B3hB,EAAW,2CAA8C;AAAA,EAA0Ce,GACpIoa,GAAUnb,GAAY+S,EAC/B4O,EAAe,cAAgBxG,EAAS,gBAAmBnb,EAAW,UAAa,yCAA4C+S,EAAU,OAAU,4CAC1I+E,IAAS,eAClB6J,EAAe,sCACN7J,IAAS,iBAClB6J,EAAe,qCAERrW,IAAW,KACpBC,EAAa,YACboW,EAAe,UAAa5O,EAAU,yBAA6B/S,EAAW,KACrEsL,IAAW,KACpBC,EAAa,YACboW,EAAe,yBAA4B3hB,EAAW,KAC7CsL,IAAW,MACpBC,EAAa,qBACT4P,GAAUnb,GAAY+S,EACxB4O,EAAe,cAAgBxG,EAAO,YAAY,EAAI,gBAAmBnb,EAAW,UAAa,0CAA6C+S,EAAU,OAAU,4CACzJoI,IACTwG,EAAe,2BAA8BxG,EAAO,YAAY,EAAI,MAGjE,IAAI9P,GAAkBC,GAAU,IAAKC,EAAY,IAAI,MAAMoW,CAAY,EAAG,EAAI,CACvF,CAEA,SAAShM,GAAaoC,EAAS,CAC7B,QAASna,EAAIma,EAAQ,OAAS,EAAGna,GAAK,EAAGA,IAAK,CAC5C,IAAImH,EAASgT,EAAQna,CAAC,EACtB,GAAIoW,GAAiBjP,CAAM,EACzB,MAAO,CACL,OAAAA,EACA,IAAKnH,CACP,CAEJ,CACF,CACA,SAASuf,GAAkB7d,EAAM,CAC/B,IAAI+B,EAAa,OAAO/B,GAAS,SAAWC,GAAUD,CAAI,EAAIA,EAC9D,OAAOD,GAAW3B,EAAS,CAAC,EAAG2D,EAAY,CACzC,KAAM,EACR,CAAC,CAAC,CACJ,CACA,SAASmR,GAAiBvN,EAAGC,EAAG,CAC9B,OAAID,EAAE,WAAaC,EAAE,UAAYD,EAAE,SAAWC,EAAE,OACvC,GAELD,EAAE,OAAS,GAENC,EAAE,OAAS,GACTD,EAAE,OAASC,EAAE,KAEf,GACEA,EAAE,OAAS,EAOxB,CACA,SAASma,GAAUuC,EAAK,CACtB,OAAO,OAAOA,GAAQ,UAAYA,GAAO,MAAQ,SAAUA,CAC7D,CACA,SAAS9F,GAAgB/W,EAAQ,CAC/B,OAAOA,GAAU,MAAQ,OAAOA,GAAW,UAAY,SAAUA,GAAU,WAAYA,IAAWA,EAAO,OAAS9C,EAAW,MAAQ8C,EAAO,OAAS9C,EAAW,MAClK,CACA,SAASgW,GAAwBlT,EAAQ,CACvC,OAAOwW,GAAWxW,EAAO,MAAM,GAAK+G,GAAoB,IAAI/G,EAAO,OAAO,MAAM,CAClF,CACA,SAASoP,GAAiBpP,EAAQ,CAChC,OAAOA,EAAO,OAAS9C,EAAW,QACpC,CACA,SAAS+Q,EAAcjO,EAAQ,CAC7B,OAAOA,EAAO,OAAS9C,EAAW,KACpC,CACA,SAAS+R,GAAiBjP,EAAQ,CAChC,OAAQA,GAAUA,EAAO,QAAU9C,EAAW,QAChD,CACA,SAAS6e,GAAehgB,EAAO,CAC7B,IAAI+gB,EAAW/gB,EACf,OAAO+gB,GAAY,OAAOA,GAAa,UAAY,OAAOA,EAAS,MAAS,UAAY,OAAOA,EAAS,WAAc,YAAc,OAAOA,EAAS,QAAW,YAAc,OAAOA,EAAS,aAAgB,UAC/M,CACA,SAAStG,GAAWza,EAAO,CACzB,OAAOA,GAAS,MAAQ,OAAOA,EAAM,QAAW,UAAY,OAAOA,EAAM,YAAe,UAAY,OAAOA,EAAM,SAAY,UAAY,OAAOA,EAAM,MAAS,WACjK,CACA,SAASib,GAAmBhX,EAAQ,CAClC,GAAI,CAACwW,GAAWxW,CAAM,EACpB,MAAO,GAET,IAAIuG,EAASvG,EAAO,OAChB9F,EAAW8F,EAAO,QAAQ,IAAI,UAAU,EAC5C,OAAOuG,GAAU,KAAOA,GAAU,KAAOrM,GAAY,IACvD,CACA,SAASmc,GAAcD,EAAQ,CAC7B,OAAOtP,GAAoB,IAAIsP,EAAO,YAAY,CAAC,CACrD,CACA,SAASlK,GAAiBkK,EAAQ,CAChC,OAAOxP,GAAqB,IAAIwP,EAAO,YAAY,CAAC,CACtD,CACA,eAAe3C,GAAuBH,EAAgBzD,EAAemD,EAAS+J,EAAS9E,EAAW2B,EAAmB,CACnH,QAASngB,EAAQ,EAAGA,EAAQuZ,EAAQ,OAAQvZ,IAAS,CACnD,IAAIuG,EAASgT,EAAQvZ,CAAK,EACtBoF,EAAQgR,EAAcpW,CAAK,EAI/B,GAAI,CAACoF,EACH,SAEF,IAAIgb,EAAevG,EAAe,KAAKxK,GAAKA,EAAE,MAAM,KAAOjK,EAAM,MAAM,EAAE,EACrEme,EAAuBnD,GAAgB,MAAQ,CAACL,GAAmBK,EAAchb,CAAK,IAAM+a,GAAqBA,EAAkB/a,EAAM,MAAM,EAAE,KAAO,OAC5J,GAAIuQ,GAAiBpP,CAAM,IAAMiY,GAAa+E,GAAuB,CAInE,IAAInX,EAASkX,EAAQtjB,CAAK,EAC1BqC,EAAU+J,EAAQ,kEAAkE,EACpF,MAAM0M,GAAoBvS,EAAQ6F,EAAQoS,CAAS,EAAE,KAAKjY,GAAU,CAC9DA,IACFgT,EAAQvZ,CAAK,EAAIuG,GAAUgT,EAAQvZ,CAAK,EAE5C,CAAC,CACH,CACF,CACF,CACA,eAAe8Y,GAAoBvS,EAAQ6F,EAAQoX,EAAQ,CAKzD,GAJIA,IAAW,SACbA,EAAS,IAEG,OAAMjd,EAAO,aAAa,YAAY6F,CAAM,EAI1D,IAAIoX,EACF,GAAI,CACF,MAAO,CACL,KAAM/f,EAAW,KACjB,KAAM8C,EAAO,aAAa,aAC5B,CACF,OAASqT,EAAG,CAEV,MAAO,CACL,KAAMnW,EAAW,MACjB,MAAOmW,CACT,CACF,CAEF,MAAO,CACL,KAAMnW,EAAW,KACjB,KAAM8C,EAAO,aAAa,IAC5B,EACF,CACA,SAAS+X,GAAmB7c,EAAQ,CAClC,OAAO,IAAI,gBAAgBA,CAAM,EAAE,OAAO,OAAO,EAAE,KAAK0H,GAAKA,IAAM,EAAE,CACvE,CACA,SAASmM,GAAevQ,EAAStE,EAAU,CACzC,IAAIgB,EAAS,OAAOhB,GAAa,SAAWM,GAAUN,CAAQ,EAAE,OAASA,EAAS,OAClF,GAAIsE,EAAQA,EAAQ,OAAS,CAAC,EAAE,MAAM,OAASuZ,GAAmB7c,GAAU,EAAE,EAE5E,OAAOsD,EAAQA,EAAQ,OAAS,CAAC,EAInC,IAAIoF,EAAcH,GAA2BjF,CAAO,EACpD,OAAOoF,EAAYA,EAAY,OAAS,CAAC,CAC3C,CACA,SAAS8L,GAA4BlB,EAAY,CAC/C,GAAI,CACF,WAAAoE,EACA,WAAAC,EACA,YAAAC,EACA,KAAAuF,EACA,SAAAI,EACA,KAAA9T,CACF,EAAI6J,EACJ,GAAI,GAACoE,GAAc,CAACC,GAAc,CAACC,GAGnC,IAAIuF,GAAQ,KACV,MAAO,CACL,WAAAzF,EACA,WAAAC,EACA,YAAAC,EACA,SAAU,OACV,KAAM,OACN,KAAAuF,CACF,EACK,GAAII,GAAY,KACrB,MAAO,CACL,WAAA7F,EACA,WAAAC,EACA,YAAAC,EACA,SAAA2F,EACA,KAAM,OACN,KAAM,MACR,EACK,GAAI9T,IAAS,OAClB,MAAO,CACL,WAAAiO,EACA,WAAAC,EACA,YAAAC,EACA,SAAU,OACV,KAAAnO,EACA,KAAM,MACR,EAEJ,CACA,SAASuJ,GAAqBhU,EAAU2S,EAAY,CAClD,OAAIA,EACe,CACf,MAAO,UACP,SAAA3S,EACA,WAAY2S,EAAW,WACvB,WAAYA,EAAW,WACvB,YAAaA,EAAW,YACxB,SAAUA,EAAW,SACrB,KAAMA,EAAW,KACjB,KAAMA,EAAW,IACnB,EAGiB,CACf,MAAO,UACP,SAAA3S,EACA,WAAY,OACZ,WAAY,OACZ,YAAa,OACb,SAAU,OACV,KAAM,OACN,KAAM,MACR,CAGJ,CACA,SAASuU,GAAwBvU,EAAU2S,EAAY,CAWrD,MAViB,CACf,MAAO,aACP,SAAA3S,EACA,WAAY2S,EAAW,WACvB,WAAYA,EAAW,WACvB,YAAaA,EAAW,YACxB,SAAUA,EAAW,SACrB,KAAMA,EAAW,KACjB,KAAMA,EAAW,IACnB,CAEF,CACA,SAASuE,GAAkBvE,EAAYjI,EAAM,CAC3C,OAAIiI,EACY,CACZ,MAAO,UACP,WAAYA,EAAW,WACvB,WAAYA,EAAW,WACvB,YAAaA,EAAW,YACxB,SAAUA,EAAW,SACrB,KAAMA,EAAW,KACjB,KAAMA,EAAW,KACjB,KAAAjI,CACF,EAGc,CACZ,MAAO,UACP,WAAY,OACZ,WAAY,OACZ,YAAa,OACb,SAAU,OACV,KAAM,OACN,KAAM,OACN,KAAAA,CACF,CAGJ,CACA,SAASiN,GAAqBhF,EAAY8E,EAAiB,CAWzD,MAVc,CACZ,MAAO,aACP,WAAY9E,EAAW,WACvB,WAAYA,EAAW,WACvB,YAAaA,EAAW,YACxB,SAAUA,EAAW,SACrB,KAAMA,EAAW,KACjB,KAAMA,EAAW,KACjB,KAAM8E,EAAkBA,EAAgB,KAAO,MACjD,CAEF,CACA,SAASM,GAAerN,EAAM,CAW5B,MAVc,CACZ,MAAO,OACP,WAAY,OACZ,WAAY,OACZ,YAAa,OACb,SAAU,OACV,KAAM,OACN,KAAM,OACN,KAAAA,CACF,CAEF,CACA,SAASoG,GAA0BkS,EAASC,EAAa,CACvD,GAAI,CACF,IAAIC,EAAmBF,EAAQ,eAAe,QAAQ5V,EAAuB,EAC7E,GAAI8V,EAAkB,CACpB,IAAIzY,EAAO,KAAK,MAAMyY,CAAgB,EACtC,OAAS,CAACxX,EAAGhD,CAAC,IAAK,OAAO,QAAQ+B,GAAQ,CAAC,CAAC,EACtC/B,GAAK,MAAM,QAAQA,CAAC,GACtBua,EAAY,IAAIvX,EAAG,IAAI,IAAIhD,GAAK,CAAC,CAAC,CAAC,CAGzC,CACF,MAAY,CAEZ,CACF,CACA,SAASsI,GAA0BgS,EAASC,EAAa,CACvD,GAAIA,EAAY,KAAO,EAAG,CACxB,IAAIxY,EAAO,CAAC,EACZ,OAAS,CAACiB,EAAGhD,CAAC,IAAKua,EACjBxY,EAAKiB,CAAC,EAAI,CAAC,GAAGhD,CAAC,EAEjB,GAAI,CACFsa,EAAQ,eAAe,QAAQ5V,GAAyB,KAAK,UAAU3C,CAAI,CAAC,CAC9E,OAAS5H,EAAO,CACd3C,GAAQ,GAAO,8DAAgE2C,EAAQ,IAAI,CAC7F,CACF,CACF,C","sources":["webpack://app/../../node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.18.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnMissImpl = init.unstable_patchRoutesOnMiss;\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnMissImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  // In SPA apps, if the user provided a patchRoutesOnMiss implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && patchRoutesOnMissImpl && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  let initialized;\n  if (!initialMatches) {\n    // We need to run patchRoutesOnMiss in initialize()\n    initialized = false;\n    initialMatches = [];\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = m => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (typeof m.route.loader === \"function\" && m.route.loader.hydrate === true) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    };\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Map of pending patchRoutesOnMiss() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n      // Create a GET request for the loaders\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let {\n          boundaryId,\n          error\n        } = handleDiscoverRouteError(location.pathname, discoverResult);\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches);\n      result = results[0];\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let {\n          boundaryId,\n          error\n        } = handleDiscoverRouteError(location.pathname, discoverResult);\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(request, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors).filter(_ref2 => {\n        let [id] = _ref2;\n        return !matchesToLoad.some(m => m.route.id === id);\n      }).forEach(_ref3 => {\n        let [routeId, error] = _ref3;\n        errors = Object.assign(errors || {}, {\n          [routeId]: error\n        });\n      });\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n      return false;\n    }\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, path, fetchRequest.signal);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let {\n          error\n        } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", fetchRequest, [match], requestMatches);\n    let actionResult = actionResults[0];\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, {\n            fetcherSubmission: submission\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(revalidationRequest, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, path, fetchRequest.signal);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let {\n          error\n        } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", fetchRequest, [match], matches);\n    let result = results[0];\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(request, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches) {\n    try {\n      let results = await callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties);\n      return await Promise.all(results.map((result, i) => {\n        if (isRedirectHandlerResult(result)) {\n          let response = result.result;\n          return {\n            type: ResultType.redirect,\n            response: normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath)\n          };\n        }\n        return convertHandlerResultToDataResult(result);\n      }));\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      return matchesToLoad.map(() => ({\n        type: ResultType.error,\n        error: e\n      }));\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    let [loaderResults, ...fetcherResults] = await Promise.all([matchesToLoad.length ? callDataStrategy(\"loader\", request, matchesToLoad, matches) : [], ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        let fetcherRequest = createClientSideRequest(init.history, f.path, f.controller.signal);\n        return callDataStrategy(\"loader\", fetcherRequest, [f.match], f.matches).then(r => r[0]);\n      } else {\n        return Promise.resolve({\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        });\n      }\n    })]);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref4) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref4;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse);\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n  function handleDiscoverRouteError(pathname, discoverResult) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message: discoverResult.error != null && \"message\" in discoverResult.error ? discoverResult.error : String(discoverResult.error)\n      })\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnMissImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        let leafRoute = matches[matches.length - 1].route;\n        if (leafRoute.path && (leafRoute.path === \"*\" || leafRoute.path.endsWith(\"/*\"))) {\n          // If we matched a splat, it might only be because we haven't yet fetched\n          // the children that would match with a higher score, so let's fetch\n          // around and find out\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  async function discoverRoutes(matches, pathname, signal) {\n    let partialMatches = matches;\n    let route = partialMatches.length > 0 ? partialMatches[partialMatches.length - 1].route : null;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(patchRoutesOnMissImpl, pathname, partialMatches, routesToUse, manifest, mapRouteProperties, pendingPatchRoutes, signal);\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      let matchedSplat = false;\n      if (newMatches) {\n        let leafRoute = newMatches[newMatches.length - 1].route;\n        if (leafRoute.index) {\n          // If we found an index route, we can stop\n          return {\n            type: \"success\",\n            matches: newMatches\n          };\n        }\n        if (leafRoute.path && leafRoute.path.length > 0) {\n          if (leafRoute.path === \"*\") {\n            // If we found a splat route, we can't be sure there's not a\n            // higher-scoring route down some partial matches trail so we need\n            // to check that out\n            matchedSplat = true;\n          } else {\n            // If we found a non-splat route, we can stop\n            return {\n              type: \"success\",\n              matches: newMatches\n            };\n          }\n        }\n      }\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n      // If we are no longer partially matching anything, this was either a\n      // legit splat match above, or it's a 404.  Also avoid loops if the\n      // second pass results in the same partial matches\n      if (!newPartialMatches || partialMatches.map(m => m.route.id).join(\"-\") === newPartialMatches.map(m => m.route.id).join(\"-\")) {\n        return {\n          type: \"success\",\n          matches: matchedSplat ? newMatches : null\n        };\n      }\n      partialMatches = newPartialMatches;\n      route = partialMatches[partialMatches.length - 1].route;\n      if (route.path === \"*\") {\n        // The splat is still our most accurate partial, so run with it\n        return {\n          type: \"success\",\n          matches: partialMatches\n        };\n      }\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, skipLoaderErrorBubbling === true, null);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      unstable_dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, false, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `HandlerResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isHandlerResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, unstable_dataStrategy);\n      result = results[0];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy) {\n    let results = await callDataStrategyImpl(unstable_dataStrategy || defaultDataStrategy, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext);\n    return await Promise.all(results.map((result, i) => {\n      if (isRedirectHandlerResult(result)) {\n        let response = result.result;\n        // Throw redirects and let the server handle them with an HTTP redirect\n        throw normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n      return convertHandlerResultToDataResult(result);\n    }));\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref5) => {\n        let [name, value] = _ref5;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[0] : undefined;\n  let boundaryMatches = boundaryId ? getLoaderMatchesUntilBoundary(matches, boundaryId) : matches;\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return state.loaderData[route.id] === undefined && (\n      // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Idempotent utility to execute patchRoutesOnMiss() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(patchRoutesOnMissImpl, path, matches, routes, manifest, mapRouteProperties, pendingRouteChildren, signal) {\n  let key = [path, ...matches.map(m => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnMissImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(routeId, children, routes, manifest, mapRouteProperties);\n          }\n        }\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n    if (pending && isPromise(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  if (routeId) {\n    var _route$children;\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    let dataChildren = convertRoutesToDataRoutes(children, mapRouteProperties, [routeId, \"patch\", String(((_route$children = route.children) == null ? void 0 : _route$children.length) || \"0\")], manifest);\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(children, mapRouteProperties, [\"patch\", String(routesToUse.length || \"0\")], manifest);\n    routesToUse.push(...dataChildren);\n  }\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction defaultDataStrategy(opts) {\n  return Promise.all(opts.matches.map(m => m.resolve()));\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext) {\n  let routeIdsToLoad = matchesToLoad.reduce((acc, m) => acc.add(m.route.id), new Set());\n  let loadedMatches = new Set();\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: matches.map(match => {\n      let shouldLoad = routeIdsToLoad.has(match.route.id);\n      // `resolve` encapsulates the route.lazy, executing the\n      // loader/action, and mapping return values/thrown errors to a\n      // HandlerResult.  Users can pass a callback to take fine-grained control\n      // over the execution of the loader/action\n      let resolve = handlerOverride => {\n        loadedMatches.add(match.route.id);\n        return shouldLoad ? callLoaderOrAction(type, request, match, manifest, mapRouteProperties, handlerOverride, requestContext) : Promise.resolve({\n          type: ResultType.data,\n          result: undefined\n        });\n      };\n      return _extends({}, match, {\n        shouldLoad,\n        resolve\n      });\n    }),\n    request,\n    params: matches[0].params,\n    context: requestContext\n  });\n  // Throw if any loadRoute implementations not called since they are what\n  // ensures a route is fully loaded\n  matches.forEach(m => invariant(loadedMatches.has(m.route.id), \"`match.resolve()` was not called for route id \\\"\" + m.route.id + \"\\\". \" + \"You must call `match.resolve()` on every match passed to \" + \"`dataStrategy` to ensure all routes are properly loaded.\"));\n  // Filter out any middleware-only matches for which we didn't need to run handlers\n  return results.filter((_, i) => routeIdsToLoad.has(matches[i].route.id));\n}\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type, request, match, manifest, mapRouteProperties, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    // This will never resolve so safe to type it as Promise<HandlerResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n    let handlerPromise;\n    if (handlerOverride) {\n      handlerPromise = handlerOverride(ctx => actualHandler(ctx));\n    } else {\n      handlerPromise = (async () => {\n        try {\n          let val = await actualHandler();\n          return {\n            type: \"data\",\n            result: val\n          };\n        } catch (e) {\n          return {\n            type: \"error\",\n            result: e\n          };\n        }\n      })();\n    }\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // HandlerResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertHandlerResultToDataResult(handlerResult) {\n  let {\n    result,\n    type,\n    status\n  } = handlerResult;\n  if (isResponse(result)) {\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === ResultType.error) {\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : status\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result,\n    statusCode: status\n  };\n}\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  );\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage = \"Unable to match URL \\\"\" + pathname + \"\\\" - the `unstable_patchRoutesOnMiss()` \" + (\"function threw the following error:\\n\" + message);\n    } else if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isPromise(val) {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\nfunction isHandlerResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectHandlerResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n"],"names":["_extends","target","i","source","key","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","entry","index","createMemoryLocation","clampIndex","action","listener","n","getCurrentLocation","to","state","location","createLocation","warning","createHref","createPath","path","parsePath","nextLocation","delta","nextIndex","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","pathname","search","hash","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","createHashHref","base","href","url","hashIndex","validateHashLocation","invariant","value","message","cond","createKey","getHistoryState","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","getIndex","handlePop","history","push","historyState","error","replace","createURL","ResultType","immutableRouteKeys","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","parentsMeta","flattenRoute","relativePath","meta","joinPaths","routesMeta","computeScore","_route$path","exploded","explodeOptionalSegments","segments","first","rest","isOptional","required","restExploded","result","subpath","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","score","segment","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","normalizePathname","generatePath","originalPath","prefix","stringify","p","array","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","pathnameBase","captureGroups","memo","paramName","splatValue","caseSensitive","regexpSource","_","v","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","idx","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","headers","AbortedDeferredError","DeferredData","reject","r","onAbort","acc","_ref2","promise","undefinedError","aborted","settledKey","subscriber","k","signal","resolve","_ref3","unwrapTrackedPromise","isTrackedPromise","defer","redirect","redirectDocument","response","ErrorResponseImpl","status","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","IDLE_FETCHER","IDLE_BLOCKER","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","defaultDataStrategy","patchRoutesOnMissImpl","future","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","checkFogOfWar","initialized","m","errors","isRouteInitialized","router","pendingAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","pendingPatchRoutes","ignoreNextHistoryUpdate","initialize","historyAction","blockerKey","shouldBlockNavigation","updateBlocker","blockers","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","dispose","deleteFetcher","deleteBlocker","subscribe","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","completeNavigation","_temp","_location$state","_location$state2","flushSync","isActionReload","isMutationMethod","actionData","mergeLoaderData","preventScrollReset","viewTransitionOpts","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","submission","normalizeNavigateOptions","currentLocation","userReplace","revalidate","interruptActiveLoads","saveScrollPosition","routesToUse","loadingNavigation","fogOfWar","notFoundMatches","handleNavigational404","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","actionResult","handleAction","routeId","isErrorResult","getLoadingNavigation","shortCircuited","updatedMatches","handleLoaders","getActionDataForCommit","isFogOfWar","navigation","getSubmittingNavigation","discoverResult","discoverRoutes","boundaryId","handleDiscoverRouteError","actionMatch","getTargetMatch","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","boundaryMatch","overrideNavigation","fetcherSubmission","initialHydration","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","rf","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","detectAndHandle405Error","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","formMethod","formAction","formEncType","type","results","callDataStrategyImpl","isRedirectHandlerResult","normalizeRelativeRoutingRedirectResponse","convertHandlerResultToDataResult","e","currentMatches","fetchersToLoad","fetcherRequest","resolveDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","controller","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref4","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","leafRoute","partialMatches","isNonHMR","loadLazyRouteChildren","newMatches","matchedSplat","newPartialMatches","_internalSetRoutes","newRoutes","patchRoutes","children","patchRoutesImpl","UNSAFE_DEFERRED_SYMBOL","createStaticHandler","query","_temp3","requestContext","skipLoaderErrorBubbling","unstable_dataStrategy","method","isValidMethod","methodNotAllowedMatches","queryImpl","isResponse","queryRoute","_temp4","_result$activeDeferre","routeMatch","submit","loadRouteData","isHandlerResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","loaderRequest","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","getStaticContextFromError","isSubmissionNavigation","prependBasename","fromRouteId","relative","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","stripHashFromPath","text","_ref5","name","searchParams","formData","convertFormDataToSearchParams","convertSearchParamsToFormData","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","pendingRouteChildren","pending","isPromise","_route$children","dataChildren","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","routeIdsToLoad","loadedMatches","shouldLoad","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","abortPromise","actualHandler","ctx","handlerPromise","handlerError","handlerResult","contentType","isDeferredData","_result$init","_result$init2","trimmedMatches","normalizedLocation","isSameBasename","statusCode","foundError","loaderHeaders","pendingError","newLoaderData","mergedLoaderData","_temp5","errorMessage","val","deferred","signals","isRevalidatingLoader","unwrap","_window","transitions","sessionPositions"],"sourceRoot":""}